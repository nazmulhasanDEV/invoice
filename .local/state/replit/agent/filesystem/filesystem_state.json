{"file_contents":{"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/pages/Landing.tsx":{"content":"import Hero from \"@/components/Hero\";\nimport Features from \"@/components/Features\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen\">\n      <Hero />\n      <Features />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":278},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/examples/UploadAndPreview.tsx":{"content":"import UploadAndPreview from '../UploadAndPreview';\n\nexport default function UploadAndPreviewExample() {\n  return (\n    <div className=\"p-8\">\n      <UploadAndPreview />\n    </div>\n  );\n}\n","size_bytes":187},"client/src/components/examples/CategoryManager.tsx":{"content":"import CategoryManager from '../CategoryManager';\n\nexport default function CategoryManagerExample() {\n  return (\n    <div className=\"p-8\">\n      <CategoryManager />\n    </div>\n  );\n}\n","size_bytes":183},"client/src/components/examples/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport AuthModal from '../AuthModal';\nimport { Button } from \"@/components/ui/button\";\n\nexport default function AuthModalExample() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className=\"p-8\">\n      <Button onClick={() => setOpen(true)}>Open Auth Modal</Button>\n      <AuthModal open={open} onOpenChange={setOpen} />\n    </div>\n  );\n}\n","size_bytes":390},"client/src/components/examples/TopVendors.tsx":{"content":"import TopVendors from '../TopVendors';\n\nexport default function TopVendorsExample() {\n  return (\n    <div className=\"p-8 max-w-md\">\n      <TopVendors />\n    </div>\n  );\n}\n","size_bytes":172},"client/src/components/examples/SpendingTrends.tsx":{"content":"import SpendingTrends from '../SpendingTrends';\n\nexport default function SpendingTrendsExample() {\n  return (\n    <div className=\"p-8\">\n      <SpendingTrends />\n    </div>\n  );\n}\n","size_bytes":179},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\nexport default function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n      className=\"toggle-elevate\"\n      data-active={theme === \"dark\"}\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":782},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport DashboardSummary from \"@/components/DashboardSummary\";\nimport CategoryList from \"@/components/CategoryList\";\nimport CategoryDetail from \"@/components/CategoryDetail\";\nimport RecentInvoices from \"@/components/RecentInvoices\";\nimport TopVendors from \"@/components/TopVendors\";\nimport SpendingTrends from \"@/components/SpendingTrends\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { Upload } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n  \n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  const handleCategorySelect = (categoryId: string) => {\n    setSelectedCategory(categoryId);\n    console.log(\"Selected category:\", categoryId);\n  };\n\n  const handleUploadClick = () => {\n    setLocation(\"/upload\");\n  };\n\n  const categoryNames: Record<string, string> = {\n    \"1\": \"Tomatoes\",\n    \"2\": \"Onions\",\n    \"3\": \"Milk\",\n    \"4\": \"Chicken Breast\",\n    \"5\": \"Rice\",\n    \"6\": \"Potatoes\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar activeItem=\"Dashboard\" />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <h2 className=\"text-xl font-semibold\">Dashboard Overview</h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <ThemeToggle />\n              <Button \n                onClick={handleUploadClick}\n                variant=\"default\"\n                data-testid=\"button-upload-invoice-header\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload Invoice\n              </Button>\n            </div>\n          </header>\n          \n          <main className=\"flex-1 overflow-auto\">\n            <div className=\"p-8 space-y-6\">\n              <div>\n                <h1 className=\"text-2xl font-bold mb-2\">Welcome Back</h1>\n                <p className=\"text-muted-foreground\">Here's a comprehensive overview of your invoice analytics</p>\n              </div>\n\n              <DashboardSummary />\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2 space-y-6\">\n                  <SpendingTrends />\n                  <RecentInvoices />\n                </div>\n\n                <div className=\"space-y-6\">\n                  <CategoryList \n                    selectedId={selectedCategory || undefined} \n                    onSelect={handleCategorySelect} \n                  />\n                  <TopVendors />\n                </div>\n              </div>\n\n              {selectedCategory && (\n                <div className=\"mt-6\">\n                  <CategoryDetail categoryName={categoryNames[selectedCategory] || \"Category\"} />\n                </div>\n              )}\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":3458},"design_guidelines.md":{"content":"# Design Guidelines: AI Invoice Analyzer SaaS Platform\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from modern SaaS platforms like Linear, Stripe Dashboard, and Notion - emphasizing clarity, data visualization, and professional aesthetics suitable for a business intelligence tool.\n\n## Core Design Principles\n- **Data-First Design**: Prioritize clear data presentation and actionable insights\n- **Professional Trust**: Build confidence through clean, enterprise-grade UI\n- **AI-Enhanced UX**: Visually communicate AI capabilities through subtle gradients and smart interactions\n- **Efficient Workflows**: Minimize steps from upload to insight\n\n---\n\n## Color System\n\n### User-Specified Palette (Strictly Applied)\n- **Primary Gradient**: `239 84% 67%` → `271 91% 65%` (blue to purple) - Use for key widgets, headers, CTAs\n- **Accent**: `187 92% 69%` (bright cyan) - Action buttons, confirmed states, interactive elements\n- **Background**: `222 47% 11%` (dark slate) - Main canvas and content areas\n- **Text Primary**: `210 40% 98%` (near white) - Maximum contrast for primary content\n- **Text Secondary**: `215 16% 65%` (muted gray-blue) - Less important text, labels, footnotes\n\n### Extended System Colors\n- **Success**: `142 71% 45%` (green) - Successful extractions, data confirmations\n- **Warning**: `38 92% 50%` (orange) - Review needed, missing data alerts\n- **Error**: `0 84% 60%` (red) - Extraction failures, validation errors\n- **Surface**: `217 33% 17%` (lighter slate) - Cards, panels, elevated surfaces\n- **Border**: `215 28% 17%` (subtle border) - Dividers, card outlines\n\n---\n\n## Typography\n\n### Font Families\n- **Primary**: Inter (via Google Fonts) - Clean, modern, excellent readability for data-heavy interfaces\n- **Monospace**: JetBrains Mono - Invoice data, CSV previews, item codes\n\n### Type Scale\n- **Display**: text-4xl font-bold (36px) - Landing page hero\n- **H1**: text-3xl font-semibold (30px) - Dashboard section headers\n- **H2**: text-2xl font-semibold (24px) - Card titles, category headers\n- **H3**: text-xl font-medium (20px) - Table headers, subsections\n- **Body**: text-base (16px) - Primary content, descriptions\n- **Small**: text-sm (14px) - Labels, metadata, secondary info\n- **Tiny**: text-xs (12px) - Badges, timestamps, helper text\n\n---\n\n## Layout System\n\n### Spacing Primitives\n**Consistent Tailwind Units**: 2, 4, 8, 12, 16, 24, 32 (translate to 0.5rem, 1rem, 2rem, 3rem, 4rem, 6rem, 8rem)\n- **Micro**: p-2, gap-2 - Tight spacing within components\n- **Standard**: p-4, gap-4 - Card padding, form fields\n- **Comfortable**: p-8, gap-8 - Section padding, major groupings\n- **Generous**: p-16, p-24 - Landing page sections, dashboard margins\n\n### Grid System\n- **Dashboard**: 12-column grid with 24px gutters\n- **Max Container Width**: max-w-7xl (1280px) for main content\n- **Sidebar**: Fixed 280px width, collapsible to 64px (icon-only)\n- **Data Tables**: Full-width within container, horizontal scroll on overflow\n\n---\n\n## Component Library\n\n### Landing Page Components\n\n**Hero Section** (100vh)\n- Full-viewport height with gradient overlay on background image\n- Centered headline (text-5xl font-bold) with gradient text effect matching primary gradient\n- Subheadline (text-xl text-secondary) max-w-2xl\n- Dual CTA buttons: Primary (cyan accent) + Secondary (outline with blur backdrop)\n- Floating invoice mockup preview showing AI extraction in action\n- Subtle particle effect or grid pattern in background\n\n**Features Grid** (3-column on desktop)\n- Icon + Title + Description cards with hover lift effect\n- Cards: bg-surface, rounded-xl, p-8, border border-border\n- Icons: 48px, cyan accent color\n- Sections: AI Extraction, Category Management, Analytics Dashboard, Seasonal Alerts, Export Tools\n\n**Social Proof**\n- Customer testimonial cards with avatar, company logo, quote\n- Trust badges: \"AI-Powered\", \"Secure\", \"Enterprise-Ready\"\n- Stats counter: Users, Invoices Processed, Time Saved\n\n**Pricing Section** (if subscription-based)\n- 3-tier pricing cards with gradient borders on recommended plan\n- Feature comparison checklist\n- Monthly/Annual toggle with savings badge\n\n**Footer**\n- Newsletter signup with cyan accent button\n- Quick links, social media, contact info\n- Dark slate background with subtle top border\n\n### Dashboard Components\n\n**Top Navigation Bar**\n- Fixed position, bg-surface with blur backdrop\n- Logo + Search bar + User menu\n- Height: 64px, shadow-md\n\n**Sidebar Navigation**\n- Categories list with icons\n- Active state: gradient background + cyan border-l-4\n- Collapsed state shows only icons with tooltips\n\n**Invoice Upload Zone**\n- Drag-and-drop area with dashed border (border-dashed border-2)\n- Icon: Upload cloud (96px, cyan)\n- Accepted formats badge\n- Active drag state: cyan gradient border, scale transform\n\n**Data Preview Table**\n- Sticky header with bg-surface\n- Alternating row colors for readability (bg-background and bg-surface/50)\n- Editable cells with focus state (cyan border)\n- Category dropdown per row with search capability\n- AI confidence indicator (progress bar, gradient fill)\n- Action column: Edit, Delete, Re-extract icons\n\n**Category Detail Page**\n\n*Overview Cards* (4-column grid)\n- Total Purchases, Avg Price, Top Vendor, Price Trend\n- Glass morphism effect: bg-surface/80, backdrop-blur-xl\n- Large number (text-4xl font-bold) + label + trend indicator\n\n*Purchase History Table*\n- Sortable columns: Date, Vendor, Quantity, Unit Price, Total\n- Pagination controls at bottom\n- Export CSV button (cyan accent) top-right\n\n*Price Fluctuation Chart*\n- Line chart with gradient fill under line (primary gradient)\n- Grid lines (subtle, border color)\n- Tooltips on hover showing exact values\n- Time range selector: 1M, 3M, 6M, 1Y, All\n- Library: Chart.js or Recharts\n\n*Vendor Analysis*\n- Horizontal bar chart showing vendors by frequency/expense\n- Most expensive vendor highlighted with cyan accent\n- Average price per unit comparison\n\n**Modals & Overlays**\n- Center-screen with backdrop-blur\n- Max-width: max-w-2xl\n- Animation: Fade + scale from 95% to 100%\n- Close button: top-right, hover:bg-surface\n\n---\n\n## Interactions & Micro-Animations\n\n**Minimal Animation Philosophy**: Use sparingly for feedback, not decoration\n\n**Button States**\n- Hover: brightness-110, transition-all duration-200\n- Active: scale-95\n- Loading: Spinner animation (cyan accent)\n\n**Card Hover**\n- Subtle lift: translate-y-[-4px], shadow-xl\n- Transition: 200ms ease-out\n\n**Data Updates**\n- Flash highlight on cell edit: bg-cyan/20 for 500ms\n- Success toast: slide-in from top-right, auto-dismiss after 3s\n\n**Chart Animations**\n- Initial load: Animate data points from 0 with 800ms ease-out\n- No continuous animations\n\n---\n\n## Images & Visual Assets\n\n### Landing Page\n**Hero Background Image**: \n- High-quality photo of organized invoices/receipts or abstract business data visualization\n- Dark overlay (bg-black/60) to ensure text contrast\n- Positioned: background-size: cover, background-position: center\n\n**Feature Icons**: \n- Use Heroicons (outline style) at 24px for consistency\n- Key icons: DocumentTextIcon, ChartBarIcon, BellIcon, CloudArrowUpIcon\n\n**Mockup Image**:\n- Dashboard preview showing invoice extraction interface\n- Floating in hero with subtle shadow and gradient border\n- PNG with transparency\n\n### Dashboard\n**Empty States**: \n- Illustration for \"No invoices uploaded yet\" with upload prompt\n- Minimal, line-art style matching color palette\n\n**Category Icons**: \n- Allow user-selected icons from Heroicons library for each category\n- Display at 20px in navigation, 32px in category headers\n\n---\n\n## Accessibility & Responsive Design\n\n### Dark Mode\n- Already implemented as primary theme\n- Ensure all form inputs maintain dark background with light text\n- Input focus: cyan ring (ring-2 ring-cyan)\n\n### Mobile Responsiveness\n- Landing: Stack hero content, single-column features\n- Dashboard: Hamburger menu for sidebar, full-width tables with horizontal scroll\n- Data table: Sticky first column on mobile for context\n\n### Contrast Compliance\n- All text meets WCAG AA standards (4.5:1 minimum)\n- Interactive elements have 3:1 contrast against backgrounds\n\n---\n\n## Technical Specifications\n\n### Icons\n- **Library**: Heroicons (outline variant) via CDN\n- **Size Standard**: 20px default, 24px for emphasis, 16px for small\n\n### Performance\n- Lazy load dashboard charts until visible\n- Virtualize long category lists (>100 items)\n- Compress uploaded invoice images before display\n\nThis design system creates a professional, AI-enhanced SaaS experience that balances sophisticated data visualization with approachable usability, perfectly suited for business users managing invoice analytics.","size_bytes":8690},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Role and Permission Constants\nexport const ROLES = {\n  OWNER: \"owner\",\n  ADMIN: \"admin\",\n  MANAGER: \"manager\",\n  MEMBER: \"member\",\n  VIEWER: \"viewer\",\n} as const;\n\nexport const PERMISSIONS = {\n  VIEW_INVOICES: \"view_invoices\",\n  UPLOAD_INVOICES: \"upload_invoices\",\n  MANAGE_CATEGORIES: \"manage_categories\",\n  MANAGE_TEAM: \"manage_team\",\n  BILLING_ACCESS: \"billing_access\",\n  SETTINGS_ACCESS: \"settings_access\",\n} as const;\n\nexport const ROLE_PERMISSIONS: Record<string, string[]> = {\n  [ROLES.OWNER]: Object.values(PERMISSIONS),\n  [ROLES.ADMIN]: Object.values(PERMISSIONS),\n  [ROLES.MANAGER]: [\n    PERMISSIONS.VIEW_INVOICES,\n    PERMISSIONS.UPLOAD_INVOICES,\n    PERMISSIONS.MANAGE_CATEGORIES,\n  ],\n  [ROLES.MEMBER]: [PERMISSIONS.VIEW_INVOICES, PERMISSIONS.UPLOAD_INVOICES],\n  [ROLES.VIEWER]: [PERMISSIONS.VIEW_INVOICES],\n};\n\nexport type Role = (typeof ROLES)[keyof typeof ROLES];\nexport type Permission = (typeof PERMISSIONS)[keyof typeof PERMISSIONS];\n\n// Users Table (Extended)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  fullName: text(\"full_name\"),\n  avatarUrl: text(\"avatar_url\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastLogin: timestamp(\"last_login\"),\n});\n\n// Teams Table\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Team Members Table\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  role: text(\"role\").notNull().default(ROLES.MEMBER),\n  status: text(\"status\").notNull().default(\"active\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\n// Team Invitations Table\nexport const teamInvitations = pgTable(\"team_invitations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id),\n  email: text(\"email\").notNull(),\n  role: text(\"role\").notNull().default(ROLES.MEMBER),\n  token: text(\"token\").notNull().unique(),\n  invitedBy: varchar(\"invited_by\").notNull().references(() => users.id),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payment Methods Table\nexport const paymentMethods = pgTable(\"payment_methods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  stripePaymentMethodId: text(\"stripe_payment_method_id\").notNull(),\n  type: text(\"type\").notNull(),\n  last4: text(\"last4\").notNull(),\n  brand: text(\"brand\"),\n  expiryMonth: integer(\"expiry_month\"),\n  expiryYear: integer(\"expiry_year\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Billing History Table\nexport const billingHistory = pgTable(\"billing_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  stripeInvoiceId: text(\"stripe_invoice_id\").notNull(),\n  amount: integer(\"amount\").notNull(),\n  currency: text(\"currency\").notNull().default(\"usd\"),\n  status: text(\"status\").notNull(),\n  invoiceUrl: text(\"invoice_url\"),\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Notification Preferences Table\nexport const notificationPreferences = pgTable(\"notification_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  invoiceAlerts: boolean(\"invoice_alerts\").default(true),\n  seasonalAlerts: boolean(\"seasonal_alerts\").default(true),\n  teamUpdates: boolean(\"team_updates\").default(true),\n  billingAlerts: boolean(\"billing_alerts\").default(true),\n});\n\n// Security Settings Table\nexport const securitySettings = pgTable(\"security_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false),\n  twoFactorSecret: text(\"two_factor_secret\"),\n  recoveryEmail: text(\"recovery_email\"),\n  sessionTimeout: integer(\"session_timeout\").default(30),\n});\n\n// Insert Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  fullName: true,\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertTeamInvitationSchema = createInsertSchema(teamInvitations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentMethodSchema = createInsertSchema(paymentMethods).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBillingHistorySchema = createInsertSchema(billingHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationPreferencesSchema = createInsertSchema(notificationPreferences).omit({\n  id: true,\n});\n\nexport const insertSecuritySettingsSchema = createInsertSchema(securitySettings).omit({\n  id: true,\n});\n\n// Update Profile Schema\nexport const updateProfileSchema = z.object({\n  fullName: z.string().optional(),\n  email: z.string().email().optional(),\n  avatarUrl: z.string().url().optional(),\n});\n\n// Export Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Team = typeof teams.$inferSelect;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type TeamInvitation = typeof teamInvitations.$inferSelect;\nexport type PaymentMethod = typeof paymentMethods.$inferSelect;\nexport type BillingHistory = typeof billingHistory.$inferSelect;\nexport type NotificationPreferences = typeof notificationPreferences.$inferSelect;\nexport type SecuritySettings = typeof securitySettings.$inferSelect;\nexport type UpdateProfile = z.infer<typeof updateProfileSchema>;\n","size_bytes":6785},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/CategoriesGrid.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, TrendingDown, ChevronRight, Package } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport SeasonalBadge, { SeasonType } from \"./SeasonalBadge\";\n\ninterface Category {\n  id: string;\n  name: string;\n  itemCount: number;\n  totalSpent: number;\n  avgPrice: number;\n  priceChange: number;\n  lastPurchase: string;\n  season: SeasonType;\n  festivalName?: string;\n}\n\nconst mockCategories: Category[] = [\n  { id: \"1\", name: \"Tomatoes\", itemCount: 25, totalSpent: 2150, avgPrice: 2.65, priceChange: 8, lastPurchase: \"2024-12-15\", season: \"summer\" },\n  { id: \"2\", name: \"Onions\", itemCount: 18, totalSpent: 890, avgPrice: 1.95, priceChange: -3, lastPurchase: \"2024-12-14\", season: \"year-round\" },\n  { id: \"3\", name: \"Milk\", itemCount: 32, totalSpent: 1280, avgPrice: 1.25, priceChange: 5, lastPurchase: \"2024-12-15\", season: \"year-round\" },\n  { id: \"4\", name: \"Chicken Breast\", itemCount: 15, totalSpent: 3200, avgPrice: 8.75, priceChange: 12, lastPurchase: \"2024-12-12\", season: \"year-round\" },\n  { id: \"5\", name: \"Rice\", itemCount: 22, totalSpent: 1540, avgPrice: 3.45, priceChange: -2, lastPurchase: \"2024-12-10\", season: \"year-round\" },\n  { id: \"6\", name: \"Potatoes\", itemCount: 20, totalSpent: 720, avgPrice: 1.80, priceChange: 4, lastPurchase: \"2024-12-13\", season: \"fall\" },\n  { id: \"7\", name: \"Christmas Decorations\", itemCount: 8, totalSpent: 480, avgPrice: 12.50, priceChange: 25, lastPurchase: \"2023-12-10\", season: \"festival\", festivalName: \"Christmas\" },\n  { id: \"8\", name: \"Pumpkins\", itemCount: 12, totalSpent: 360, avgPrice: 5.50, priceChange: 15, lastPurchase: \"2024-10-28\", season: \"festival\", festivalName: \"Halloween\" },\n  { id: \"9\", name: \"Turkey\", itemCount: 4, totalSpent: 520, avgPrice: 45.00, priceChange: 18, lastPurchase: \"2023-11-22\", season: \"festival\", festivalName: \"Thanksgiving\" },\n  { id: \"10\", name: \"Strawberries\", itemCount: 18, totalSpent: 720, avgPrice: 4.20, priceChange: 10, lastPurchase: \"2024-06-15\", season: \"spring\" },\n];\n\ninterface CategoriesGridProps {\n  onSelectCategory?: (categoryId: string, categoryName: string) => void;\n  currentPage: number;\n  itemsPerPage: number;\n}\n\nexport default function CategoriesGrid({ onSelectCategory, currentPage, itemsPerPage }: CategoriesGridProps) {\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedCategories = mockCategories.slice(startIndex, endIndex);\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n      {paginatedCategories.map((category, index) => {\n        const TrendIcon = category.priceChange >= 0 ? TrendingUp : TrendingDown;\n        \n        return (\n          <Card \n            key={category.id}\n            className=\"p-6 hover-elevate cursor-pointer transition-all\"\n            onClick={() => onSelectCategory?.(category.id, category.name)}\n            data-testid={`category-card-${index}`}\n          >\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"w-12 h-12 rounded-md bg-gradient-to-br from-chart-1/20 to-chart-2/20 flex items-center justify-center\">\n                <Package className=\"w-6 h-6 text-chart-1\" />\n              </div>\n              <ChevronRight className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n\n            <div className=\"mb-3\">\n              <h3 className=\"text-xl font-bold mb-2\">{category.name}</h3>\n              <SeasonalBadge season={category.season} festivalName={category.festivalName} size=\"sm\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mb-4\">\n              {category.itemCount} purchases\n            </p>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Total Spent</span>\n                <span className=\"font-semibold\">${category.totalSpent.toLocaleString()}</span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Avg Price</span>\n                <span className=\"font-semibold\">${category.avgPrice.toFixed(2)}/unit</span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Price Trend</span>\n                <div className=\"flex items-center gap-1\">\n                  <TrendIcon className={cn(\n                    \"w-4 h-4\",\n                    category.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                  )} />\n                  <span className={cn(\n                    \"text-sm font-semibold\",\n                    category.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                  )}>\n                    {category.priceChange >= 0 ? '+' : ''}{category.priceChange}%\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-4 pt-4 border-t\">\n              <p className=\"text-xs text-muted-foreground\">\n                Last purchase: {category.lastPurchase}\n              </p>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":5400},"client/src/components/Features.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Brain, FolderTree, TrendingUp, Bell, FileDown, Shield } from \"lucide-react\";\n\nconst features = [\n  {\n    icon: Brain,\n    title: \"AI-Powered Extraction\",\n    description: \"Gemini AI automatically extracts all invoice data with 99% accuracy—items, quantities, prices, vendors, and dates.\"\n  },\n  {\n    icon: FolderTree,\n    title: \"Smart Categorization\",\n    description: \"Organize extracted items into custom categories. Each category tracks purchase history and trends over time.\"\n  },\n  {\n    icon: TrendingUp,\n    title: \"Price Analytics\",\n    description: \"Visualize price fluctuations with interactive charts. Identify cost trends and optimize your purchasing decisions.\"\n  },\n  {\n    icon: Shield,\n    title: \"Vendor Intelligence\",\n    description: \"Compare vendors by unit price, frequency, and total spend. Find the most cost-effective suppliers instantly.\"\n  },\n  {\n    icon: Bell,\n    title: \"Seasonal Alerts\",\n    description: \"Automatic notifications for seasonal items. Never miss the optimal purchasing window for time-sensitive products.\"\n  },\n  {\n    icon: FileDown,\n    title: \"Export & Reports\",\n    description: \"Export your data to CSV format. Generate comprehensive reports for accounting and analysis.\"\n  }\n];\n\nexport default function Features() {\n  return (\n    <section className=\"py-24 px-4 sm:px-6 lg:px-8 bg-background\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Everything You Need to\n            <span className=\"bg-gradient-to-r from-chart-1 to-chart-2 bg-clip-text text-transparent\"> Streamline Invoices</span>\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Built for individuals, freelancers, and businesses of all sizes. Save time, reduce errors, and gain actionable insights.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <Card \n                key={index} \n                className=\"p-8 hover-elevate transition-all duration-200\"\n                data-testid={`card-feature-${index}`}\n              >\n                <div className=\"w-12 h-12 rounded-md bg-gradient-to-br from-chart-1 to-chart-2 flex items-center justify-center mb-4\">\n                  <Icon className=\"w-6 h-6 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3\">{feature.title}</h3>\n                <p className=\"text-muted-foreground leading-relaxed\">{feature.description}</p>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2842},"server/storage.ts":{"content":"import type { \n  User, \n  InsertUser,\n  Team,\n  TeamMember,\n  TeamInvitation,\n  PaymentMethod,\n  BillingHistory,\n  NotificationPreferences,\n  SecuritySettings,\n  UpdateProfile,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserProfile(userId: string, profile: UpdateProfile): Promise<User | undefined>;\n  updateUserStripeCustomer(userId: string, customerId: string): Promise<User | undefined>;\n  updateUserStripeSubscription(userId: string, subscriptionId: string): Promise<User | undefined>;\n  \n  // Team methods\n  createTeam(name: string, ownerId: string): Promise<Team>;\n  getTeam(teamId: string): Promise<Team | undefined>;\n  getTeamsByUser(userId: string): Promise<Team[]>;\n  updateTeam(teamId: string, name: string): Promise<Team | undefined>;\n  deleteTeam(teamId: string): Promise<boolean>;\n  \n  // Team member methods\n  addTeamMember(teamId: string, userId: string, role: string): Promise<TeamMember>;\n  getTeamMembers(teamId: string): Promise<TeamMember[]>;\n  updateTeamMemberRole(memberId: string, role: string): Promise<TeamMember | undefined>;\n  removeTeamMember(memberId: string): Promise<boolean>;\n  getUserTeamRole(userId: string, teamId: string): Promise<string | undefined>;\n  \n  // Invitation methods\n  createInvitation(teamId: string, email: string, role: string, invitedBy: string): Promise<TeamInvitation>;\n  getInvitation(token: string): Promise<TeamInvitation | undefined>;\n  getPendingInvitations(teamId: string): Promise<TeamInvitation[]>;\n  deleteInvitation(id: string): Promise<boolean>;\n  \n  // Payment method methods\n  addPaymentMethod(userId: string, method: Omit<PaymentMethod, 'id' | 'userId' | 'createdAt'>): Promise<PaymentMethod>;\n  getPaymentMethods(userId: string): Promise<PaymentMethod[]>;\n  setDefaultPaymentMethod(userId: string, methodId: string): Promise<boolean>;\n  removePaymentMethod(methodId: string): Promise<boolean>;\n  \n  // Billing history methods\n  addBillingRecord(userId: string, record: Omit<BillingHistory, 'id' | 'userId' | 'createdAt'>): Promise<BillingHistory>;\n  getBillingHistory(userId: string): Promise<BillingHistory[]>;\n  \n  // Notification preferences methods\n  getNotificationPreferences(userId: string): Promise<NotificationPreferences | undefined>;\n  updateNotificationPreferences(userId: string, prefs: Partial<NotificationPreferences>): Promise<NotificationPreferences>;\n  \n  // Security settings methods\n  getSecuritySettings(userId: string): Promise<SecuritySettings | undefined>;\n  updateSecuritySettings(userId: string, settings: Partial<SecuritySettings>): Promise<SecuritySettings>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private teams: Map<string, Team>;\n  private teamMembers: Map<string, TeamMember>;\n  private teamInvitations: Map<string, TeamInvitation>;\n  private paymentMethods: Map<string, PaymentMethod>;\n  private billingHistory: Map<string, BillingHistory>;\n  private notificationPreferences: Map<string, NotificationPreferences>;\n  private securitySettings: Map<string, SecuritySettings>;\n\n  constructor() {\n    this.users = new Map();\n    this.teams = new Map();\n    this.teamMembers = new Map();\n    this.teamInvitations = new Map();\n    this.paymentMethods = new Map();\n    this.billingHistory = new Map();\n    this.notificationPreferences = new Map();\n    this.securitySettings = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      email: insertUser.email || null,\n      fullName: insertUser.fullName || null,\n      avatarUrl: null,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      createdAt: new Date(),\n      lastLogin: null,\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUserProfile(userId: string, profile: UpdateProfile): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updated = { ...user, ...profile };\n    this.users.set(userId, updated);\n    return updated;\n  }\n\n  async updateUserStripeCustomer(userId: string, customerId: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updated = { ...user, stripeCustomerId: customerId };\n    this.users.set(userId, updated);\n    return updated;\n  }\n\n  async updateUserStripeSubscription(userId: string, subscriptionId: string): Promise<User | undefined> {\n    const user = this.users.get(userId);\n    if (!user) return undefined;\n    \n    const updated = { ...user, stripeSubscriptionId: subscriptionId };\n    this.users.set(userId, updated);\n    return updated;\n  }\n\n  // Team methods\n  async createTeam(name: string, ownerId: string): Promise<Team> {\n    const id = randomUUID();\n    const team: Team = {\n      id,\n      name,\n      ownerId,\n      createdAt: new Date(),\n    };\n    this.teams.set(id, team);\n    \n    await this.addTeamMember(id, ownerId, 'owner');\n    return team;\n  }\n\n  async getTeam(teamId: string): Promise<Team | undefined> {\n    return this.teams.get(teamId);\n  }\n\n  async getTeamsByUser(userId: string): Promise<Team[]> {\n    const memberRecords = Array.from(this.teamMembers.values()).filter(\n      (member) => member.userId === userId\n    );\n    return memberRecords\n      .map((member) => this.teams.get(member.teamId))\n      .filter((team): team is Team => team !== undefined);\n  }\n\n  async updateTeam(teamId: string, name: string): Promise<Team | undefined> {\n    const team = this.teams.get(teamId);\n    if (!team) return undefined;\n    \n    const updated = { ...team, name };\n    this.teams.set(teamId, updated);\n    return updated;\n  }\n\n  async deleteTeam(teamId: string): Promise<boolean> {\n    return this.teams.delete(teamId);\n  }\n\n  // Team member methods\n  async addTeamMember(teamId: string, userId: string, role: string): Promise<TeamMember> {\n    const id = randomUUID();\n    const member: TeamMember = {\n      id,\n      teamId,\n      userId,\n      role,\n      status: 'active',\n      joinedAt: new Date(),\n    };\n    this.teamMembers.set(id, member);\n    return member;\n  }\n\n  async getTeamMembers(teamId: string): Promise<TeamMember[]> {\n    return Array.from(this.teamMembers.values()).filter(\n      (member) => member.teamId === teamId\n    );\n  }\n\n  async updateTeamMemberRole(memberId: string, role: string): Promise<TeamMember | undefined> {\n    const member = this.teamMembers.get(memberId);\n    if (!member) return undefined;\n    \n    const updated = { ...member, role };\n    this.teamMembers.set(memberId, updated);\n    return updated;\n  }\n\n  async removeTeamMember(memberId: string): Promise<boolean> {\n    return this.teamMembers.delete(memberId);\n  }\n\n  async getUserTeamRole(userId: string, teamId: string): Promise<string | undefined> {\n    const member = Array.from(this.teamMembers.values()).find(\n      (m) => m.userId === userId && m.teamId === teamId\n    );\n    return member?.role;\n  }\n\n  // Invitation methods\n  async createInvitation(teamId: string, email: string, role: string, invitedBy: string): Promise<TeamInvitation> {\n    const id = randomUUID();\n    const token = randomUUID();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7);\n    \n    const invitation: TeamInvitation = {\n      id,\n      teamId,\n      email,\n      role,\n      token,\n      invitedBy,\n      expiresAt,\n      createdAt: new Date(),\n    };\n    this.teamInvitations.set(id, invitation);\n    return invitation;\n  }\n\n  async getInvitation(token: string): Promise<TeamInvitation | undefined> {\n    return Array.from(this.teamInvitations.values()).find(\n      (inv) => inv.token === token\n    );\n  }\n\n  async getPendingInvitations(teamId: string): Promise<TeamInvitation[]> {\n    return Array.from(this.teamInvitations.values()).filter(\n      (inv) => inv.teamId === teamId && inv.expiresAt > new Date()\n    );\n  }\n\n  async deleteInvitation(id: string): Promise<boolean> {\n    return this.teamInvitations.delete(id);\n  }\n\n  // Payment method methods\n  async addPaymentMethod(userId: string, method: Omit<PaymentMethod, 'id' | 'userId' | 'createdAt'>): Promise<PaymentMethod> {\n    const id = randomUUID();\n    const paymentMethod: PaymentMethod = {\n      id,\n      userId,\n      ...method,\n      createdAt: new Date(),\n    };\n    this.paymentMethods.set(id, paymentMethod);\n    return paymentMethod;\n  }\n\n  async getPaymentMethods(userId: string): Promise<PaymentMethod[]> {\n    return Array.from(this.paymentMethods.values()).filter(\n      (method) => method.userId === userId\n    );\n  }\n\n  async setDefaultPaymentMethod(userId: string, methodId: string): Promise<boolean> {\n    const methods = await this.getPaymentMethods(userId);\n    \n    for (const method of methods) {\n      const updated = { ...method, isDefault: method.id === methodId };\n      this.paymentMethods.set(method.id, updated);\n    }\n    \n    return true;\n  }\n\n  async removePaymentMethod(methodId: string): Promise<boolean> {\n    return this.paymentMethods.delete(methodId);\n  }\n\n  // Billing history methods\n  async addBillingRecord(userId: string, record: Omit<BillingHistory, 'id' | 'userId' | 'createdAt'>): Promise<BillingHistory> {\n    const id = randomUUID();\n    const billing: BillingHistory = {\n      id,\n      userId,\n      ...record,\n      createdAt: new Date(),\n    };\n    this.billingHistory.set(id, billing);\n    return billing;\n  }\n\n  async getBillingHistory(userId: string): Promise<BillingHistory[]> {\n    return Array.from(this.billingHistory.values())\n      .filter((record) => record.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  // Notification preferences methods\n  async getNotificationPreferences(userId: string): Promise<NotificationPreferences | undefined> {\n    return Array.from(this.notificationPreferences.values()).find(\n      (pref) => pref.userId === userId\n    );\n  }\n\n  async updateNotificationPreferences(userId: string, prefs: Partial<NotificationPreferences>): Promise<NotificationPreferences> {\n    let existing = await this.getNotificationPreferences(userId);\n    \n    if (!existing) {\n      const id = randomUUID();\n      existing = {\n        id,\n        userId,\n        emailNotifications: true,\n        invoiceAlerts: true,\n        seasonalAlerts: true,\n        teamUpdates: true,\n        billingAlerts: true,\n      };\n    }\n    \n    const updated = { ...existing, ...prefs };\n    this.notificationPreferences.set(updated.id, updated);\n    return updated;\n  }\n\n  // Security settings methods\n  async getSecuritySettings(userId: string): Promise<SecuritySettings | undefined> {\n    return Array.from(this.securitySettings.values()).find(\n      (settings) => settings.userId === userId\n    );\n  }\n\n  async updateSecuritySettings(userId: string, settings: Partial<SecuritySettings>): Promise<SecuritySettings> {\n    let existing = await this.getSecuritySettings(userId);\n    \n    if (!existing) {\n      const id = randomUUID();\n      existing = {\n        id,\n        userId,\n        twoFactorEnabled: false,\n        twoFactorSecret: null,\n        recoveryEmail: null,\n        sessionTimeout: 30,\n      };\n    }\n    \n    const updated = { ...existing, ...settings };\n    this.securitySettings.set(updated.id, updated);\n    return updated;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11916},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport UploadInvoice from \"@/pages/UploadInvoice\";\nimport Categories from \"@/pages/Categories\";\nimport Settings from \"@/pages/Settings\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/upload\" component={UploadInvoice} />\n      <Route path=\"/categories\" component={Categories} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\" storageKey=\"invoice-ai-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1276},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/SeasonalAlert.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Bell, Clock, TrendingUp, Calendar, PartyPopper } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SeasonalAlertData {\n  type: \"upcoming\" | \"active\" | \"ending\";\n  season: string;\n  daysUntil?: number;\n  daysRemaining?: number;\n  festivalName?: string;\n  festivalDate?: string;\n  recommendation: string;\n  priceIncrease?: number;\n}\n\nconst mockAlerts: SeasonalAlertData[] = [\n  {\n    type: \"upcoming\",\n    season: \"festival\",\n    festivalName: \"Christmas\",\n    festivalDate: \"Dec 25\",\n    daysUntil: 15,\n    recommendation: \"Stock up on festive items now. Prices typically increase 20-30% closer to the holiday.\",\n    priceIncrease: 25,\n  },\n  {\n    type: \"active\",\n    season: \"winter\",\n    daysRemaining: 45,\n    recommendation: \"Winter produce at peak availability. Best time to purchase seasonal vegetables.\",\n  },\n  {\n    type: \"upcoming\",\n    season: \"festival\",\n    festivalName: \"New Year\",\n    festivalDate: \"Jan 1\",\n    daysUntil: 22,\n    recommendation: \"Party supplies and ingredients for New Year celebrations typically see higher demand.\",\n    priceIncrease: 15,\n  },\n];\n\nexport default function SeasonalAlert() {\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2\">\n        <Bell className=\"w-5 h-5 text-chart-3\" />\n        <h3 className=\"text-lg font-semibold\">Seasonal Alerts & Recommendations</h3>\n      </div>\n\n      <div className=\"space-y-3\">\n        {mockAlerts.map((alert, index) => (\n          <Alert \n            key={index}\n            className={cn(\n              \"border-l-4\",\n              alert.type === \"upcoming\" && \"border-l-chart-3 bg-chart-3/5\",\n              alert.type === \"active\" && \"border-l-chart-4 bg-chart-4/5\",\n              alert.type === \"ending\" && \"border-l-destructive bg-destructive/5\"\n            )}\n            data-testid={`alert-${index}`}\n          >\n            <div className=\"flex items-start gap-3\">\n              <div className={cn(\n                \"w-10 h-10 rounded-md flex items-center justify-center flex-shrink-0\",\n                alert.type === \"upcoming\" && \"bg-chart-3/20\",\n                alert.type === \"active\" && \"bg-chart-4/20\",\n                alert.type === \"ending\" && \"bg-destructive/20\"\n              )}>\n                {alert.season === \"festival\" ? (\n                  <PartyPopper className={cn(\n                    \"w-5 h-5\",\n                    alert.type === \"upcoming\" && \"text-chart-3\",\n                    alert.type === \"active\" && \"text-chart-4\"\n                  )} />\n                ) : (\n                  <Calendar className={cn(\n                    \"w-5 h-5\",\n                    alert.type === \"upcoming\" && \"text-chart-3\",\n                    alert.type === \"active\" && \"text-chart-4\",\n                    alert.type === \"ending\" && \"text-destructive\"\n                  )} />\n                )}\n              </div>\n\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  {alert.type === \"upcoming\" && (\n                    <Badge className=\"bg-chart-3 text-background\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      {alert.daysUntil} days until {alert.festivalName || alert.season}\n                    </Badge>\n                  )}\n                  {alert.type === \"active\" && (\n                    <Badge className=\"bg-chart-4 text-background\">\n                      Active Season\n                    </Badge>\n                  )}\n                  {alert.festivalName && (\n                    <span className=\"font-semibold\">{alert.festivalName} ({alert.festivalDate})</span>\n                  )}\n                </div>\n\n                <AlertDescription className=\"text-sm text-foreground mb-3\">\n                  {alert.recommendation}\n                </AlertDescription>\n\n                {alert.priceIncrease && (\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <TrendingUp className=\"w-3.5 h-3.5 text-chart-4\" />\n                    <span>Expected price increase: <span className=\"font-semibold text-chart-4\">+{alert.priceIncrease}%</span></span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </Alert>\n        ))}\n      </div>\n\n      <Card className=\"p-4 bg-gradient-to-r from-chart-1/10 to-chart-2/10 border-chart-1/30\">\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex-1\">\n            <h4 className=\"font-semibold mb-1\">Enable Smart Notifications</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Get alerts 2 weeks before seasonal peaks and festival dates to optimize your purchasing decisions.\n            </p>\n          </div>\n          <Button variant=\"default\" data-testid=\"button-enable-notifications\">\n            Enable\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5160},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/examples/Features.tsx":{"content":"import Features from '../Features';\n\nexport default function FeaturesExample() {\n  return <Features />;\n}\n","size_bytes":106},"client/src/components/CategoriesTable.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, TrendingDown, Eye } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport SeasonalBadge, { SeasonType } from \"./SeasonalBadge\";\n\ninterface Category {\n  id: string;\n  name: string;\n  itemCount: number;\n  totalSpent: number;\n  avgPrice: number;\n  priceChange: number;\n  lastPurchase: string;\n  season: SeasonType;\n  festivalName?: string;\n}\n\nconst mockCategories: Category[] = [\n  { id: \"1\", name: \"Tomatoes\", itemCount: 25, totalSpent: 2150, avgPrice: 2.65, priceChange: 8, lastPurchase: \"2024-12-15\", season: \"summer\" },\n  { id: \"2\", name: \"Onions\", itemCount: 18, totalSpent: 890, avgPrice: 1.95, priceChange: -3, lastPurchase: \"2024-12-14\", season: \"year-round\" },\n  { id: \"3\", name: \"Milk\", itemCount: 32, totalSpent: 1280, avgPrice: 1.25, priceChange: 5, lastPurchase: \"2024-12-15\", season: \"year-round\" },\n  { id: \"4\", name: \"Chicken Breast\", itemCount: 15, totalSpent: 3200, avgPrice: 8.75, priceChange: 12, lastPurchase: \"2024-12-12\", season: \"year-round\" },\n  { id: \"5\", name: \"Rice\", itemCount: 22, totalSpent: 1540, avgPrice: 3.45, priceChange: -2, lastPurchase: \"2024-12-10\", season: \"year-round\" },\n  { id: \"6\", name: \"Potatoes\", itemCount: 20, totalSpent: 720, avgPrice: 1.80, priceChange: 4, lastPurchase: \"2024-12-13\", season: \"fall\" },\n  { id: \"7\", name: \"Christmas Decorations\", itemCount: 8, totalSpent: 480, avgPrice: 12.50, priceChange: 25, lastPurchase: \"2023-12-10\", season: \"festival\", festivalName: \"Christmas\" },\n  { id: \"8\", name: \"Pumpkins\", itemCount: 12, totalSpent: 360, avgPrice: 5.50, priceChange: 15, lastPurchase: \"2024-10-28\", season: \"festival\", festivalName: \"Halloween\" },\n  { id: \"9\", name: \"Turkey\", itemCount: 4, totalSpent: 520, avgPrice: 45.00, priceChange: 18, lastPurchase: \"2023-11-22\", season: \"festival\", festivalName: \"Thanksgiving\" },\n  { id: \"10\", name: \"Strawberries\", itemCount: 18, totalSpent: 720, avgPrice: 4.20, priceChange: 10, lastPurchase: \"2024-06-15\", season: \"spring\" },\n];\n\ninterface CategoriesTableProps {\n  onSelectCategory?: (categoryId: string, categoryName: string) => void;\n  currentPage: number;\n  itemsPerPage: number;\n}\n\nexport default function CategoriesTable({ onSelectCategory, currentPage, itemsPerPage }: CategoriesTableProps) {\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const paginatedCategories = mockCategories.slice(startIndex, endIndex);\n\n  return (\n    <div className=\"border rounded-md overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\" data-testid=\"table-categories\">\n          <thead className=\"bg-muted/50\">\n            <tr className=\"border-b\">\n              <th className=\"text-left p-4 font-semibold\">Category</th>\n              <th className=\"text-left p-4 font-semibold\">Season</th>\n              <th className=\"text-right p-4 font-semibold\">Purchases</th>\n              <th className=\"text-right p-4 font-semibold\">Total Spent</th>\n              <th className=\"text-right p-4 font-semibold\">Avg Price</th>\n              <th className=\"text-right p-4 font-semibold\">Price Trend</th>\n              <th className=\"text-left p-4 font-semibold\">Last Purchase</th>\n              <th className=\"text-center p-4 font-semibold\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {paginatedCategories.map((category, index) => {\n              const TrendIcon = category.priceChange >= 0 ? TrendingUp : TrendingDown;\n              \n              return (\n                <tr \n                  key={category.id}\n                  className=\"border-b hover-elevate\"\n                  data-testid={`category-row-${index}`}\n                >\n                  <td className=\"p-4\">\n                    <div className=\"font-semibold\">{category.name}</div>\n                  </td>\n                  <td className=\"p-4\">\n                    <SeasonalBadge \n                      season={category.season} \n                      festivalName={category.festivalName} \n                      size=\"sm\" \n                    />\n                  </td>\n                  <td className=\"p-4 text-right text-muted-foreground\">\n                    {category.itemCount}\n                  </td>\n                  <td className=\"p-4 text-right font-semibold\">\n                    ${category.totalSpent.toLocaleString()}\n                  </td>\n                  <td className=\"p-4 text-right\">\n                    ${category.avgPrice.toFixed(2)}\n                  </td>\n                  <td className=\"p-4 text-right\">\n                    <div className=\"flex items-center justify-end gap-1\">\n                      <TrendIcon className={cn(\n                        \"w-4 h-4\",\n                        category.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                      )} />\n                      <span className={cn(\n                        \"text-sm font-semibold\",\n                        category.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                      )}>\n                        {category.priceChange >= 0 ? '+' : ''}{category.priceChange}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"p-4 text-muted-foreground\">\n                    {category.lastPurchase}\n                  </td>\n                  <td className=\"p-4 text-center\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onSelectCategory?.(category.id, category.name)}\n                      data-testid={`button-view-${index}`}\n                    >\n                      <Eye className=\"w-4 h-4 mr-2\" />\n                      View\n                    </Button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5985},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { User, Settings as SettingsIcon, Users, CreditCard, Bell, Shield, Plus, Trash2, Mail } from \"lucide-react\";\nimport { ROLES, type User as UserType, type TeamMember, type PaymentMethod, type BillingHistory } from \"@shared/schema\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\nexport default function Settings() {\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto p-6 max-w-6xl\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-settings\">Settings</h1>\n          <p className=\"text-muted-foreground\">Manage your account settings and preferences</p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\" data-testid=\"tabs-settings\">\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n              <User className=\"w-4 h-4 mr-2\" />\n              Profile\n            </TabsTrigger>\n            <TabsTrigger value=\"team\" data-testid=\"tab-team\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Team\n            </TabsTrigger>\n            <TabsTrigger value=\"billing\" data-testid=\"tab-billing\">\n              <CreditCard className=\"w-4 h-4 mr-2\" />\n              Billing\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">\n              <Bell className=\"w-4 h-4 mr-2\" />\n              Notifications\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" data-testid=\"tab-security\">\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Security\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <ProfileSettings />\n          </TabsContent>\n\n          <TabsContent value=\"team\" className=\"space-y-6\">\n            <TeamSettings />\n          </TabsContent>\n\n          <TabsContent value=\"billing\" className=\"space-y-6\">\n            <BillingSettings />\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <NotificationSettings />\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"space-y-6\">\n            <SecuritySettings />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nfunction ProfileSettings() {\n  const { toast } = useToast();\n  const { data: user, isLoading } = useQuery<UserType>({\n    queryKey: [\"/api/profile\"],\n  });\n\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { fullName?: string; email?: string }) => {\n      return await apiRequest(\"PATCH\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return <div data-testid=\"loading-profile\">Loading...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Profile Information</CardTitle>\n        <CardDescription>Update your account profile information</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              value={user?.username || \"\"}\n              disabled\n              data-testid=\"input-username\"\n            />\n            <p className=\"text-sm text-muted-foreground\">Username cannot be changed</p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fullName\">Full Name</Label>\n            <Input\n              id=\"fullName\"\n              placeholder=\"Enter your full name\"\n              value={formData.fullName || user?.fullName || \"\"}\n              onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n              data-testid=\"input-full-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={formData.email || user?.email || \"\"}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              data-testid=\"input-email\"\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            disabled={updateProfileMutation.isPending}\n            data-testid=\"button-save-profile\"\n          >\n            {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TeamSettings() {\n  const { toast } = useToast();\n  const [isInviteDialogOpen, setIsInviteDialogOpen] = useState(false);\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const [inviteRole, setInviteRole] = useState(ROLES.MEMBER);\n\n  const { data: teams, isLoading: teamsLoading } = useQuery({\n    queryKey: [\"/api/teams\"],\n  });\n\n  const selectedTeamId = teams?.[0]?.id;\n\n  const { data: members, isLoading: membersLoading } = useQuery<Array<TeamMember & { user?: UserType }>>({\n    queryKey: [\"/api/teams\", selectedTeamId, \"members\"],\n    enabled: !!selectedTeamId,\n  });\n\n  const { data: invitations } = useQuery({\n    queryKey: [\"/api/teams\", selectedTeamId, \"invitations\"],\n    enabled: !!selectedTeamId,\n  });\n\n  const inviteMutation = useMutation({\n    mutationFn: async (data: { email: string; role: string }) => {\n      return await apiRequest(\"POST\", `/api/teams/${selectedTeamId}/invite`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\", selectedTeamId, \"invitations\"] });\n      setIsInviteDialogOpen(false);\n      setInviteEmail(\"\");\n      toast({\n        title: \"Invitation Sent\",\n        description: \"Team invitation has been sent successfully\",\n      });\n    },\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ memberId, role }: { memberId: string; role: string }) => {\n      return await apiRequest(\"PATCH\", `/api/team-members/${memberId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\", selectedTeamId, \"members\"] });\n      toast({\n        title: \"Role Updated\",\n        description: \"Team member role has been updated\",\n      });\n    },\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (memberId: string) => {\n      return await apiRequest(\"DELETE\", `/api/team-members/${memberId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\", selectedTeamId, \"members\"] });\n      toast({\n        title: \"Member Removed\",\n        description: \"Team member has been removed\",\n      });\n    },\n  });\n\n  if (teamsLoading) {\n    return <div data-testid=\"loading-team\">Loading team...</div>;\n  }\n\n  if (!teams || teams.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"py-8\">\n          <p className=\"text-center text-muted-foreground\">No team found. Create your first team to get started.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n          <div>\n            <CardTitle>Team Members</CardTitle>\n            <CardDescription>Manage your team members and their roles</CardDescription>\n          </div>\n          <Dialog open={isInviteDialogOpen} onOpenChange={setIsInviteDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-invite-member\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Invite Member\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Invite Team Member</DialogTitle>\n                <DialogDescription>Send an invitation to join your team</DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"invite-email\">Email Address</Label>\n                  <Input\n                    id=\"invite-email\"\n                    type=\"email\"\n                    placeholder=\"colleague@example.com\"\n                    value={inviteEmail}\n                    onChange={(e) => setInviteEmail(e.target.value)}\n                    data-testid=\"input-invite-email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"invite-role\">Role</Label>\n                  <Select value={inviteRole} onValueChange={setInviteRole}>\n                    <SelectTrigger data-testid=\"select-invite-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value={ROLES.VIEWER}>Viewer</SelectItem>\n                      <SelectItem value={ROLES.MEMBER}>Member</SelectItem>\n                      <SelectItem value={ROLES.MANAGER}>Manager</SelectItem>\n                      <SelectItem value={ROLES.ADMIN}>Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button \n                  onClick={() => inviteMutation.mutate({ email: inviteEmail, role: inviteRole })}\n                  disabled={inviteMutation.isPending || !inviteEmail}\n                  data-testid=\"button-send-invite\"\n                >\n                  {inviteMutation.isPending ? \"Sending...\" : \"Send Invitation\"}\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Member</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Joined</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {members?.map((member) => (\n                <TableRow key={member.id} data-testid={`row-member-${member.id}`}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarFallback>\n                          {member.user?.username?.slice(0, 2).toUpperCase() || \"??\"}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span data-testid={`text-member-name-${member.id}`}>{member.user?.username}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell data-testid={`text-member-email-${member.id}`}>\n                    {member.user?.email || \"-\"}\n                  </TableCell>\n                  <TableCell>\n                    <Select\n                      value={member.role}\n                      onValueChange={(role) => updateRoleMutation.mutate({ memberId: member.id, role })}\n                      disabled={member.role === ROLES.OWNER}\n                    >\n                      <SelectTrigger className=\"w-32\" data-testid={`select-member-role-${member.id}`}>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value={ROLES.VIEWER}>Viewer</SelectItem>\n                        <SelectItem value={ROLES.MEMBER}>Member</SelectItem>\n                        <SelectItem value={ROLES.MANAGER}>Manager</SelectItem>\n                        <SelectItem value={ROLES.ADMIN}>Admin</SelectItem>\n                        <SelectItem value={ROLES.OWNER}>Owner</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </TableCell>\n                  <TableCell data-testid={`text-member-joined-${member.id}`}>\n                    {member.joinedAt ? new Date(member.joinedAt).toLocaleDateString() : \"-\"}\n                  </TableCell>\n                  <TableCell>\n                    {member.role !== ROLES.OWNER && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => removeMemberMutation.mutate(member.id)}\n                        data-testid={`button-remove-member-${member.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {invitations && invitations.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Pending Invitations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {invitations.map((inv: any) => (\n                <div key={inv.id} className=\"flex items-center justify-between p-3 border rounded-md\" data-testid={`invitation-${inv.id}`}>\n                  <div className=\"flex items-center gap-3\">\n                    <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                    <div>\n                      <p className=\"font-medium\" data-testid={`text-invitation-email-${inv.id}`}>{inv.email}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Role: <Badge variant=\"secondary\">{inv.role}</Badge>\n                      </p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Expires {new Date(inv.expiresAt).toLocaleDateString()}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nfunction BillingSettings() {\n  const { toast } = useToast();\n  const [isAddCardDialogOpen, setIsAddCardDialogOpen] = useState(false);\n  const [setupIntentSecret, setSetupIntentSecret] = useState<string | null>(null);\n\n  const { data: paymentMethods, isLoading: methodsLoading } = useQuery<PaymentMethod[]>({\n    queryKey: [\"/api/payment-methods\"],\n  });\n\n  const { data: billingHistory } = useQuery<BillingHistory[]>({\n    queryKey: [\"/api/billing-history\"],\n  });\n\n  const setupIntentMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/stripe/setup-intent\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSetupIntentSecret(data.clientSecret);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to initialize payment setup\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const setDefaultMutation = useMutation({\n    mutationFn: async (methodId: string) => {\n      return await apiRequest(\"POST\", `/api/payment-methods/${methodId}/default`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n      toast({\n        title: \"Default Payment Method Updated\",\n        description: \"Your default payment method has been updated\",\n      });\n    },\n  });\n\n  const removeMutation = useMutation({\n    mutationFn: async (methodId: string) => {\n      return await apiRequest(\"DELETE\", `/api/payment-methods/${methodId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n      toast({\n        title: \"Payment Method Removed\",\n        description: \"Payment method has been removed\",\n      });\n    },\n  });\n\n  const handleAddCard = () => {\n    setupIntentMutation.mutate();\n    setIsAddCardDialogOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between gap-2\">\n          <div>\n            <CardTitle>Payment Methods</CardTitle>\n            <CardDescription>Manage your payment methods</CardDescription>\n          </div>\n          <Dialog open={isAddCardDialogOpen} onOpenChange={setIsAddCardDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={handleAddCard} data-testid=\"button-add-card\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Card\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add Payment Method</DialogTitle>\n                <DialogDescription>Add a new credit or debit card</DialogDescription>\n              </DialogHeader>\n              {setupIntentSecret && stripePromise ? (\n                <Elements stripe={stripePromise} options={{ clientSecret: setupIntentSecret }}>\n                  <AddCardForm onSuccess={() => {\n                    setIsAddCardDialogOpen(false);\n                    setSetupIntentSecret(null);\n                  }} />\n                </Elements>\n              ) : (\n                <div className=\"py-8 text-center text-muted-foreground\">\n                  Initializing...\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        <CardContent>\n          {methodsLoading ? (\n            <div data-testid=\"loading-payment-methods\">Loading payment methods...</div>\n          ) : paymentMethods && paymentMethods.length > 0 ? (\n            <div className=\"space-y-3\">\n              {paymentMethods.map((method) => (\n                <div\n                  key={method.id}\n                  className=\"flex items-center justify-between p-4 border rounded-md\"\n                  data-testid={`card-payment-method-${method.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <CreditCard className=\"w-8 h-8\" />\n                    <div>\n                      <p className=\"font-medium\" data-testid={`text-card-brand-${method.id}`}>\n                        {method.brand?.toUpperCase() || method.type} •••• {method.last4}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Expires {method.expiryMonth}/{method.expiryYear}\n                      </p>\n                    </div>\n                    {method.isDefault && (\n                      <Badge data-testid={`badge-default-${method.id}`}>Default</Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    {!method.isDefault && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setDefaultMutation.mutate(method.id)}\n                        data-testid={`button-set-default-${method.id}`}\n                      >\n                        Set as Default\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => removeMutation.mutate(method.id)}\n                      data-testid={`button-remove-card-${method.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-payment-methods\">\n              No payment methods added yet\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Billing History</CardTitle>\n          <CardDescription>View your past invoices and payments</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {billingHistory && billingHistory.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Invoice</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {billingHistory.map((record) => (\n                  <TableRow key={record.id} data-testid={`row-billing-${record.id}`}>\n                    <TableCell data-testid={`text-billing-date-${record.id}`}>\n                      {record.createdAt ? new Date(record.createdAt).toLocaleDateString() : \"-\"}\n                    </TableCell>\n                    <TableCell data-testid={`text-billing-amount-${record.id}`}>\n                      ${(record.amount / 100).toFixed(2)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={record.status === \"paid\" ? \"default\" : \"secondary\"} data-testid={`badge-billing-status-${record.id}`}>\n                        {record.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {record.invoiceUrl && (\n                        <a\n                          href={record.invoiceUrl}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-primary hover:underline\"\n                          data-testid={`link-invoice-${record.id}`}\n                        >\n                          View Invoice\n                        </a>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-billing-history\">\n              No billing history yet\n            </p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction AddCardForm({ onSuccess }: { onSuccess: () => void }) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) return;\n\n    setIsProcessing(true);\n\n    const { error, setupIntent } = await stripe.confirmSetup({\n      elements,\n      redirect: \"if_required\",\n    });\n\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n      return;\n    }\n\n    if (setupIntent?.payment_method) {\n      try {\n        await apiRequest(\"POST\", \"/api/payment-methods\", {\n          paymentMethodId: setupIntent.payment_method,\n        });\n\n        queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n        toast({\n          title: \"Success\",\n          description: \"Payment method added successfully\",\n        });\n        onSuccess();\n      } catch (err: any) {\n        toast({\n          title: \"Error\",\n          description: err.message,\n          variant: \"destructive\",\n        });\n      }\n    }\n\n    setIsProcessing(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <PaymentElement />\n      <Button type=\"submit\" disabled={!stripe || isProcessing} className=\"w-full\" data-testid=\"button-confirm-add-card\">\n        {isProcessing ? \"Processing...\" : \"Add Card\"}\n      </Button>\n    </form>\n  );\n}\n\nfunction NotificationSettings() {\n  const { toast } = useToast();\n\n  const { data: preferences, isLoading } = useQuery({\n    queryKey: [\"/api/notification-preferences\"],\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PATCH\", \"/api/notification-preferences\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notification-preferences\"] });\n      toast({\n        title: \"Preferences Updated\",\n        description: \"Notification preferences have been updated\",\n      });\n    },\n  });\n\n  const toggleSetting = (key: string, value: boolean) => {\n    updateMutation.mutate({ [key]: value });\n  };\n\n  if (isLoading) {\n    return <div data-testid=\"loading-notifications\">Loading...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Notification Preferences</CardTitle>\n        <CardDescription>Manage how you receive notifications</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">Email Notifications</p>\n            <p className=\"text-sm text-muted-foreground\">Receive general email notifications</p>\n          </div>\n          <Switch\n            checked={preferences?.emailNotifications ?? true}\n            onCheckedChange={(checked) => toggleSetting(\"emailNotifications\", checked)}\n            data-testid=\"switch-email-notifications\"\n          />\n        </div>\n        <Separator />\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">Invoice Alerts</p>\n            <p className=\"text-sm text-muted-foreground\">Get notified about new invoices</p>\n          </div>\n          <Switch\n            checked={preferences?.invoiceAlerts ?? true}\n            onCheckedChange={(checked) => toggleSetting(\"invoiceAlerts\", checked)}\n            data-testid=\"switch-invoice-alerts\"\n          />\n        </div>\n        <Separator />\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">Seasonal Alerts</p>\n            <p className=\"text-sm text-muted-foreground\">Alerts for seasonal and festival items</p>\n          </div>\n          <Switch\n            checked={preferences?.seasonalAlerts ?? true}\n            onCheckedChange={(checked) => toggleSetting(\"seasonalAlerts\", checked)}\n            data-testid=\"switch-seasonal-alerts\"\n          />\n        </div>\n        <Separator />\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">Team Updates</p>\n            <p className=\"text-sm text-muted-foreground\">Notifications about team changes</p>\n          </div>\n          <Switch\n            checked={preferences?.teamUpdates ?? true}\n            onCheckedChange={(checked) => toggleSetting(\"teamUpdates\", checked)}\n            data-testid=\"switch-team-updates\"\n          />\n        </div>\n        <Separator />\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">Billing Alerts</p>\n            <p className=\"text-sm text-muted-foreground\">Payment and billing notifications</p>\n          </div>\n          <Switch\n            checked={preferences?.billingAlerts ?? true}\n            onCheckedChange={(checked) => toggleSetting(\"billingAlerts\", checked)}\n            data-testid=\"switch-billing-alerts\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction SecuritySettings() {\n  const { toast } = useToast();\n\n  const { data: settings, isLoading } = useQuery({\n    queryKey: [\"/api/security-settings\"],\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PATCH\", \"/api/security-settings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/security-settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Security settings have been updated\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return <div data-testid=\"loading-security\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Security Settings</CardTitle>\n          <CardDescription>Manage your account security preferences</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Two-Factor Authentication</p>\n              <p className=\"text-sm text-muted-foreground\">Add an extra layer of security to your account</p>\n            </div>\n            <Switch\n              checked={settings?.twoFactorEnabled ?? false}\n              onCheckedChange={(checked) => updateMutation.mutate({ twoFactorEnabled: checked })}\n              data-testid=\"switch-2fa\"\n            />\n          </div>\n          <Separator />\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"recovery-email\">Recovery Email</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"recovery-email\"\n                type=\"email\"\n                placeholder=\"recovery@example.com\"\n                defaultValue={settings?.recoveryEmail || \"\"}\n                data-testid=\"input-recovery-email\"\n              />\n              <Button\n                onClick={(e) => {\n                  const input = document.getElementById(\"recovery-email\") as HTMLInputElement;\n                  updateMutation.mutate({ recoveryEmail: input.value });\n                }}\n                data-testid=\"button-save-recovery-email\"\n              >\n                Save\n              </Button>\n            </div>\n          </div>\n          <Separator />\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n            <Select\n              value={String(settings?.sessionTimeout || 30)}\n              onValueChange={(value) => updateMutation.mutate({ sessionTimeout: parseInt(value) })}\n            >\n              <SelectTrigger id=\"session-timeout\" data-testid=\"select-session-timeout\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"15\">15 minutes</SelectItem>\n                <SelectItem value=\"30\">30 minutes</SelectItem>\n                <SelectItem value=\"60\">1 hour</SelectItem>\n                <SelectItem value=\"120\">2 hours</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":32259},"client/src/components/examples/CategoryDetail.tsx":{"content":"import CategoryDetail from '../CategoryDetail';\n\nexport default function CategoryDetailExample() {\n  return (\n    <div className=\"p-8\">\n      <CategoryDetail categoryName=\"Tomatoes\" />\n    </div>\n  );\n}\n","size_bytes":203},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 220 13% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 220 13% 91%;\n\n  --sidebar: 220 9% 93%;\n\n  --sidebar-foreground: 222 47% 15%;\n\n  --sidebar-border: 220 13% 86%;\n\n  --sidebar-primary: 239 84% 67%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 14% 88%;\n\n  --sidebar-accent-foreground: 222 47% 15%;\n\n  --sidebar-ring: 239 84% 67%;\n\n  --popover: 0 0% 94%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 220 13% 87%;\n\n  --primary: 239 84% 67%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 14% 90%;\n\n  --secondary-foreground: 222 47% 15%;\n\n  --muted: 220 14% 91%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 16% 89%;\n\n  --accent-foreground: 222 47% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 82%;\n  --ring: 239 84% 67%;\n  --chart-1: 239 84% 67%;\n  --chart-2: 271 91% 65%;\n  --chart-3: 187 92% 69%;\n  --chart-4: 142 71% 45%;\n  --chart-5: 38 92% 50%;\n\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 9% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 9% / 0.1);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 13% 9% / 0.07), 0px 1px 2px -1px hsl(220 13% 9% / 0.06);\n  --shadow: 0px 4px 6px 0px hsl(220 13% 9% / 0.07), 0px 2px 4px -1px hsl(220 13% 9% / 0.06);\n  --shadow-md: 0px 6px 12px 0px hsl(220 13% 9% / 0.08), 0px 2px 4px -1px hsl(220 13% 9% / 0.03);\n  --shadow-lg: 0px 12px 24px 0px hsl(220 13% 9% / 0.1), 0px 4px 6px -1px hsl(220 13% 9% / 0.05);\n  --shadow-xl: 0px 20px 40px 0px hsl(220 13% 9% / 0.12), 0px 8px 10px -1px hsl(220 13% 9% / 0.04);\n  --shadow-2xl: 0px 25px 50px 0px hsl(220 13% 9% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 17%;\n\n  --card: 220 43% 14%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 218 38% 18%;\n\n  --sidebar: 219 40% 16%;\n\n  --sidebar-foreground: 210 40% 96%;\n\n  --sidebar-border: 218 38% 20%;\n\n  --sidebar-primary: 239 84% 67%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 218 35% 21%;\n\n  --sidebar-accent-foreground: 210 40% 96%;\n\n  --sidebar-ring: 239 84% 67%;\n\n  --popover: 217 35% 19%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 23%;\n\n  --primary: 239 84% 67%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 217 30% 23%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 28% 22%;\n\n  --muted-foreground: 215 16% 65%;\n\n  --accent: 217 25% 24%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 28%;\n  --ring: 239 84% 67%;\n  --chart-1: 239 84% 67%;\n  --chart-2: 271 91% 65%;\n  --chart-3: 187 92% 69%;\n  --chart-4: 142 71% 45%;\n  --chart-5: 38 92% 50%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.3), 0px 1px 2px -1px hsl(0 0% 0% / 0.3);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.3), 0px 2px 4px -1px hsl(0 0% 0% / 0.3);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.35), 0px 2px 4px -1px hsl(0 0% 0% / 0.2);\n  --shadow-lg: 0px 12px 24px 0px hsl(0 0% 0% / 0.4), 0px 4px 6px -1px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 40px 0px hsl(0 0% 0% / 0.45), 0px 8px 10px -1px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px 0px hsl(0 0% 0% / 0.5);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10756},"client/src/components/examples/PriceChart.tsx":{"content":"import PriceChart from '../PriceChart';\n\nexport default function PriceChartExample() {\n  return (\n    <div className=\"p-8\">\n      <PriceChart />\n    </div>\n  );\n}\n","size_bytes":163},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/examples/InvoiceUpload.tsx":{"content":"import InvoiceUpload from '../InvoiceUpload';\n\nexport default function InvoiceUploadExample() {\n  return (\n    <div className=\"p-8 max-w-4xl mx-auto\">\n      <InvoiceUpload />\n    </div>\n  );\n}\n","size_bytes":193},"client/src/components/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Sparkles, User, Building2 } from \"lucide-react\";\nimport { SiGoogle, SiGithub } from \"react-icons/si\";\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  defaultTab?: \"login\" | \"register\";\n}\n\nexport default function AuthModal({ open, onOpenChange, defaultTab = \"login\" }: AuthModalProps) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [accountType, setAccountType] = useState<\"individual\" | \"company\">(\"individual\");\n  const [companyName, setCompanyName] = useState(\"\");\n  const [companySize, setCompanySize] = useState(\"\");\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Login:\", { email, password });\n    onOpenChange(false);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Register:\", { \n      accountType, \n      name, \n      email, \n      password,\n      ...(accountType === \"company\" && { companyName, companySize })\n    });\n    onOpenChange(false);\n  };\n\n  const handleSocialLogin = (provider: string) => {\n    console.log(`Login with ${provider}`);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-8 h-8 rounded-md bg-gradient-to-br from-chart-1 to-chart-2 flex items-center justify-center\">\n              <Sparkles className=\"w-4 h-4 text-white\" />\n            </div>\n            <DialogTitle className=\"text-2xl\">InvoiceAI</DialogTitle>\n          </div>\n          <DialogDescription>\n            Sign in to access your intelligent invoice management dashboard. For individuals and businesses.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue={defaultTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n            <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-email\">Email</Label>\n                <Input\n                  id=\"login-email\"\n                  type=\"email\"\n                  placeholder=\"you@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-login-email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-password\">Password</Label>\n                <Input\n                  id=\"login-password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-login-password\"\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-gradient-to-r from-chart-1 to-chart-2\"\n                data-testid=\"button-login-submit\"\n              >\n                Sign In\n              </Button>\n            </form>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"Google\")}\n                data-testid=\"button-login-google\"\n              >\n                <SiGoogle className=\"w-4 h-4 mr-2\" />\n                Google\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"GitHub\")}\n                data-testid=\"button-login-github\"\n              >\n                <SiGithub className=\"w-4 h-4 mr-2\" />\n                GitHub\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"register\" className=\"space-y-4\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <Label>Account Type</Label>\n                <RadioGroup \n                  value={accountType} \n                  onValueChange={(value) => setAccountType(value as \"individual\" | \"company\")}\n                  className=\"grid grid-cols-2 gap-3\"\n                >\n                  <div>\n                    <RadioGroupItem\n                      value=\"individual\"\n                      id=\"individual\"\n                      className=\"peer sr-only\"\n                      data-testid=\"radio-individual\"\n                    />\n                    <Label\n                      htmlFor=\"individual\"\n                      className=\"flex flex-col items-center justify-center rounded-md border-2 border-muted bg-card p-4 hover-elevate peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary/5 cursor-pointer\"\n                    >\n                      <User className=\"mb-2 h-6 w-6\" />\n                      <span className=\"text-sm font-medium\">Individual</span>\n                    </Label>\n                  </div>\n                  <div>\n                    <RadioGroupItem\n                      value=\"company\"\n                      id=\"company\"\n                      className=\"peer sr-only\"\n                      data-testid=\"radio-company\"\n                    />\n                    <Label\n                      htmlFor=\"company\"\n                      className=\"flex flex-col items-center justify-center rounded-md border-2 border-muted bg-card p-4 hover-elevate peer-data-[state=checked]:border-primary peer-data-[state=checked]:bg-primary/5 cursor-pointer\"\n                    >\n                      <Building2 className=\"mb-2 h-6 w-6\" />\n                      <span className=\"text-sm font-medium\">Company</span>\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {accountType === \"company\" && (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-name\">Company Name</Label>\n                    <Input\n                      id=\"company-name\"\n                      type=\"text\"\n                      placeholder=\"Acme Corporation\"\n                      value={companyName}\n                      onChange={(e) => setCompanyName(e.target.value)}\n                      required\n                      data-testid=\"input-company-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-size\">Company Size</Label>\n                    <Select value={companySize} onValueChange={setCompanySize}>\n                      <SelectTrigger id=\"company-size\" data-testid=\"select-company-size\">\n                        <SelectValue placeholder=\"Select size\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                        <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                        <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                        <SelectItem value=\"201-500\">201-500 employees</SelectItem>\n                        <SelectItem value=\"500+\">500+ employees</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-name\">{accountType === \"company\" ? \"Your Full Name\" : \"Full Name\"}</Label>\n                <Input\n                  id=\"register-name\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  required\n                  data-testid=\"input-register-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-email\">{accountType === \"company\" ? \"Work Email\" : \"Email\"}</Label>\n                <Input\n                  id=\"register-email\"\n                  type=\"email\"\n                  placeholder={accountType === \"company\" ? \"you@company.com\" : \"you@example.com\"}\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-register-email\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-password\">Password</Label>\n                <Input\n                  id=\"register-password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-register-password\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-confirm\">Confirm Password</Label>\n                <Input\n                  id=\"register-confirm\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  required\n                  data-testid=\"input-register-confirm\"\n                />\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-gradient-to-r from-chart-1 to-chart-2\"\n                data-testid=\"button-register-submit\"\n              >\n                Create Account\n              </Button>\n            </form>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"Google\")}\n                data-testid=\"button-register-google\"\n              >\n                <SiGoogle className=\"w-4 h-4 mr-2\" />\n                Google\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"GitHub\")}\n                data-testid=\"button-register-github\"\n              >\n                <SiGithub className=\"w-4 h-4 mr-2\" />\n                GitHub\n              </Button>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12237},"client/src/components/AddCategoryDialog.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Plus, X } from \"lucide-react\";\nimport { SeasonType } from \"./SeasonalBadge\";\n\ninterface AddCategoryDialogProps {\n  trigger?: React.ReactNode;\n  onAdd?: (category: { name: string; aliases: string[]; season: SeasonType; festivalName?: string }) => void;\n}\n\nexport default function AddCategoryDialog({ trigger, onAdd }: AddCategoryDialogProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [categoryName, setCategoryName] = useState(\"\");\n  const [newAlias, setNewAlias] = useState(\"\");\n  const [aliases, setAliases] = useState<string[]>([]);\n  const [season, setSeason] = useState<SeasonType>(\"year-round\");\n  const [festivalName, setFestivalName] = useState(\"\");\n\n  const handleAddAlias = () => {\n    if (!newAlias.trim() || aliases.includes(newAlias.trim())) return;\n    setAliases([...aliases, newAlias.trim()]);\n    setNewAlias(\"\");\n  };\n\n  const handleRemoveAlias = (alias: string) => {\n    setAliases(aliases.filter(a => a !== alias));\n  };\n\n  const handleSubmit = () => {\n    if (!categoryName.trim()) return;\n\n    const newCategory = {\n      name: categoryName.trim(),\n      aliases,\n      season,\n      festivalName: season === \"festival\" ? festivalName.trim() : undefined,\n    };\n\n    onAdd?.(newCategory);\n    console.log(\"New category created:\", newCategory);\n\n    // Reset form\n    setCategoryName(\"\");\n    setAliases([]);\n    setSeason(\"year-round\");\n    setFestivalName(\"\");\n    setNewAlias(\"\");\n    setIsOpen(false);\n  };\n\n  const handleClose = () => {\n    setCategoryName(\"\");\n    setAliases([]);\n    setSeason(\"year-round\");\n    setFestivalName(\"\");\n    setNewAlias(\"\");\n    setIsOpen(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button \n            variant=\"default\"\n            data-testid=\"button-add-category\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Category\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Create New Category</DialogTitle>\n          <DialogDescription>\n            Define a category with aliases and seasonal information\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"category-name\">Category Name</Label>\n            <Input\n              id=\"category-name\"\n              placeholder=\"e.g., Tomatoes\"\n              value={categoryName}\n              onChange={(e) => setCategoryName(e.target.value)}\n              data-testid=\"input-category-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"season-select\">Season / Type</Label>\n            <Select value={season} onValueChange={(value) => setSeason(value as SeasonType)}>\n              <SelectTrigger id=\"season-select\" data-testid=\"select-season\">\n                <SelectValue placeholder=\"Select season\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"year-round\">Year-Round</SelectItem>\n                <SelectItem value=\"summer\">Summer</SelectItem>\n                <SelectItem value=\"fall\">Fall</SelectItem>\n                <SelectItem value=\"winter\">Winter</SelectItem>\n                <SelectItem value=\"spring\">Spring</SelectItem>\n                <SelectItem value=\"festival\">Festival / Holiday</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {season === \"festival\" && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"festival-name\">Festival / Holiday Name</Label>\n              <Input\n                id=\"festival-name\"\n                placeholder=\"e.g., Christmas, Thanksgiving\"\n                value={festivalName}\n                onChange={(e) => setFestivalName(e.target.value)}\n                data-testid=\"input-festival-name\"\n              />\n            </div>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"alias-input\">Aliases (Optional)</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"alias-input\"\n                placeholder=\"e.g., Tom, Tomato\"\n                value={newAlias}\n                onChange={(e) => setNewAlias(e.target.value)}\n                onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), handleAddAlias())}\n                data-testid=\"input-alias\"\n              />\n              <Button \n                type=\"button\" \n                onClick={handleAddAlias}\n                variant=\"outline\"\n                size=\"icon\"\n                data-testid=\"button-add-alias\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Press Enter or click + to add an alias\n            </p>\n          </div>\n\n          {aliases.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>Added Aliases ({aliases.length})</Label>\n              <div className=\"flex flex-wrap gap-2 p-3 rounded-md bg-muted/30\">\n                {aliases.map((alias, index) => (\n                  <Badge \n                    key={index} \n                    variant=\"secondary\"\n                    className=\"gap-1\"\n                    data-testid={`badge-alias-${index}`}\n                  >\n                    {alias}\n                    <button\n                      onClick={() => handleRemoveAlias(alias)}\n                      className=\"ml-1 hover:text-destructive\"\n                      data-testid={`button-remove-alias-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button \n              variant=\"outline\" \n              onClick={handleClose}\n              data-testid=\"button-cancel-category\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={!categoryName.trim()}\n              variant=\"default\"\n              data-testid=\"button-save-category\"\n            >\n              Create Category\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6951},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/examples/AppSidebar.tsx":{"content":"import AppSidebar from '../AppSidebar';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar activeItem=\"Dashboard\" />\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":442},"client/src/pages/Categories.tsx":{"content":"import { useState } from \"react\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport CategoriesGrid from \"@/components/CategoriesGrid\";\nimport CategoriesTable from \"@/components/CategoriesTable\";\nimport CategoryDetail from \"@/components/CategoryDetail\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport AddCategoryDialog from \"@/components/AddCategoryDialog\";\nimport { Search, Grid3x3, Settings, Plus, List, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { SeasonType } from \"@/components/SeasonalBadge\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst categorySeasons: Record<string, { season: SeasonType; festivalName?: string }> = {\n  \"Tomatoes\": { season: \"summer\" },\n  \"Onions\": { season: \"year-round\" },\n  \"Milk\": { season: \"year-round\" },\n  \"Chicken Breast\": { season: \"year-round\" },\n  \"Rice\": { season: \"year-round\" },\n  \"Potatoes\": { season: \"fall\" },\n  \"Christmas Decorations\": { season: \"festival\", festivalName: \"Christmas\" },\n  \"Pumpkins\": { season: \"festival\", festivalName: \"Halloween\" },\n  \"Turkey\": { season: \"festival\", festivalName: \"Thanksgiving\" },\n  \"Strawberries\": { season: \"spring\" },\n};\n\nexport default function Categories() {\n  const [selectedCategory, setSelectedCategory] = useState<{ \n    id: string; \n    name: string;\n    season: SeasonType;\n    festivalName?: string;\n  } | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"table\">(\"grid\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 8;\n  const totalCategories = 10;\n  const totalPages = Math.ceil(totalCategories / itemsPerPage);\n  const { toast } = useToast();\n  \n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  const handleSelectCategory = (id: string, name: string) => {\n    const seasonData = categorySeasons[name] || { season: \"year-round\" as SeasonType };\n    setSelectedCategory({ id, name, ...seasonData });\n  };\n\n  const handleBackToGrid = () => {\n    setSelectedCategory(null);\n  };\n\n  const handleAddCategory = (category: { name: string; aliases: string[]; season: SeasonType; festivalName?: string }) => {\n    console.log(\"Category added:\", category);\n    toast({\n      title: \"Category Created\",\n      description: `${category.name} has been added successfully with ${category.aliases.length} aliases.`,\n    });\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar activeItem=\"Categories\" />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <div>\n                <h2 className=\"text-xl font-semibold\">\n                  {selectedCategory ? selectedCategory.name : \"All Categories\"}\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  {selectedCategory ? \"Detailed analytics and insights\" : \"Manage and analyze all your item categories\"}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              {!selectedCategory && (\n                <>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search categories...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-9 w-64\"\n                      data-testid=\"input-search-categories\"\n                    />\n                  </div>\n                  <div className=\"flex items-center border rounded-md\">\n                    <Button \n                      variant={viewMode === \"grid\" ? \"default\" : \"ghost\"} \n                      size=\"icon\"\n                      onClick={() => setViewMode(\"grid\")}\n                      className=\"rounded-r-none\"\n                      data-testid=\"button-view-grid\"\n                    >\n                      <Grid3x3 className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant={viewMode === \"table\" ? \"default\" : \"ghost\"} \n                      size=\"icon\"\n                      onClick={() => setViewMode(\"table\")}\n                      className=\"rounded-l-none\"\n                      data-testid=\"button-view-table\"\n                    >\n                      <List className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                  <Button variant=\"outline\" size=\"icon\" data-testid=\"button-category-settings\">\n                    <Settings className=\"w-4 h-4\" />\n                  </Button>\n                </>\n              )}\n              <ThemeToggle />\n            </div>\n          </header>\n          \n          <main className=\"flex-1 overflow-auto p-8\">\n            {selectedCategory ? (\n              <CategoryDetail \n                categoryName={selectedCategory.name}\n                season={selectedCategory.season}\n                festivalName={selectedCategory.festivalName}\n                onBack={handleBackToGrid}\n              />\n            ) : (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    {viewMode === \"grid\" ? (\n                      <Grid3x3 className=\"w-4 h-4\" />\n                    ) : (\n                      <List className=\"w-4 h-4\" />\n                    )}\n                    <span>{totalCategories} categories found</span>\n                  </div>\n                  <AddCategoryDialog onAdd={handleAddCategory} />\n                </div>\n                \n                {viewMode === \"grid\" ? (\n                  <CategoriesGrid \n                    onSelectCategory={handleSelectCategory}\n                    currentPage={currentPage}\n                    itemsPerPage={itemsPerPage}\n                  />\n                ) : (\n                  <CategoriesTable \n                    onSelectCategory={handleSelectCategory}\n                    currentPage={currentPage}\n                    itemsPerPage={itemsPerPage}\n                  />\n                )}\n\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between pt-4\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, totalCategories)} of {totalCategories} categories\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(currentPage - 1)}\n                        disabled={currentPage === 1}\n                        data-testid=\"button-prev-page\"\n                      >\n                        <ChevronLeft className=\"w-4 h-4 mr-1\" />\n                        Previous\n                      </Button>\n                      <div className=\"flex items-center gap-1\">\n                        {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (\n                          <Button\n                            key={page}\n                            variant={currentPage === page ? \"default\" : \"outline\"}\n                            size=\"sm\"\n                            onClick={() => setCurrentPage(page)}\n                            className=\"w-9\"\n                            data-testid={`button-page-${page}`}\n                          >\n                            {page}\n                          </Button>\n                        ))}\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(currentPage + 1)}\n                        disabled={currentPage === totalPages}\n                        data-testid=\"button-next-page\"\n                      >\n                        Next\n                        <ChevronRight className=\"w-4 h-4 ml-1\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":8885},"client/src/components/examples/Hero.tsx":{"content":"import Hero from '../Hero';\n\nexport default function HeroExample() {\n  return <Hero />;\n}\n","size_bytes":90},"client/src/components/SpendingTrends.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\nconst monthlyData = [\n  { month: \"Jul\", amount: 8500 },\n  { month: \"Aug\", amount: 9200 },\n  { month: \"Sep\", amount: 8800 },\n  { month: \"Oct\", amount: 10500 },\n  { month: \"Nov\", amount: 11200 },\n  { month: \"Dec\", amount: 12458 },\n];\n\nexport default function SpendingTrends() {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Monthly Spending Trends</h3>\n      \n      <div className=\"h-64\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={monthlyData}>\n            <defs>\n              <linearGradient id=\"barGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor=\"hsl(239, 84%, 67%)\" />\n                <stop offset=\"100%\" stopColor=\"hsl(271, 91%, 65%)\" />\n              </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n            <XAxis \n              dataKey=\"month\" \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fill: 'hsl(var(--muted-foreground))' }}\n            />\n            <YAxis \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fill: 'hsl(var(--muted-foreground))' }}\n              tickFormatter={(value) => `$${(value / 1000).toFixed(0)}k`}\n            />\n            <Tooltip \n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--foreground))'\n              }}\n              formatter={(value: number) => [`$${value.toLocaleString()}`, 'Spent']}\n            />\n            <Bar dataKey=\"amount\" fill=\"url(#barGradient)\" radius={[6, 6, 0, 0]} />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1986},"client/src/components/SeasonalBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Snowflake, Sun, Leaf, CloudRain, PartyPopper, Calendar } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport type SeasonType = \"winter\" | \"spring\" | \"summer\" | \"fall\" | \"festival\" | \"year-round\";\n\ninterface SeasonConfig {\n  icon: React.ElementType;\n  label: string;\n  color: string;\n  bgColor: string;\n}\n\nconst seasonConfig: Record<SeasonType, SeasonConfig> = {\n  winter: {\n    icon: Snowflake,\n    label: \"Winter\",\n    color: \"text-blue-600 dark:text-blue-400\",\n    bgColor: \"bg-blue-100 dark:bg-blue-500/20 border-blue-300 dark:border-blue-500/30\",\n  },\n  spring: {\n    icon: Leaf,\n    label: \"Spring\",\n    color: \"text-green-700 dark:text-green-400\",\n    bgColor: \"bg-green-100 dark:bg-green-500/20 border-green-300 dark:border-green-500/30\",\n  },\n  summer: {\n    icon: Sun,\n    label: \"Summer\",\n    color: \"text-yellow-700 dark:text-yellow-400\",\n    bgColor: \"bg-yellow-100 dark:bg-yellow-500/20 border-yellow-300 dark:border-yellow-500/30\",\n  },\n  fall: {\n    icon: CloudRain,\n    label: \"Fall\",\n    color: \"text-orange-700 dark:text-orange-400\",\n    bgColor: \"bg-orange-100 dark:bg-orange-500/20 border-orange-300 dark:border-orange-500/30\",\n  },\n  festival: {\n    icon: PartyPopper,\n    label: \"Festival\",\n    color: \"text-purple-700 dark:text-purple-400\",\n    bgColor: \"bg-purple-100 dark:bg-purple-500/20 border-purple-300 dark:border-purple-500/30\",\n  },\n  \"year-round\": {\n    icon: Calendar,\n    label: \"Year-round\",\n    color: \"text-muted-foreground\",\n    bgColor: \"bg-muted/50 border-muted\",\n  },\n};\n\ninterface SeasonalBadgeProps {\n  season: SeasonType;\n  festivalName?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport default function SeasonalBadge({ season, festivalName, size = \"md\" }: SeasonalBadgeProps) {\n  const config = seasonConfig[season];\n  const Icon = config.icon;\n  \n  const sizeClasses = {\n    sm: \"text-xs px-2 py-0.5\",\n    md: \"text-sm px-2.5 py-1\",\n    lg: \"text-base px-3 py-1.5\",\n  };\n\n  return (\n    <Badge \n      className={cn(\n        config.bgColor,\n        config.color,\n        sizeClasses[size],\n        \"font-medium\"\n      )}\n      data-testid={`badge-season-${season}`}\n    >\n      <Icon className={cn(\n        \"mr-1\",\n        size === \"sm\" ? \"w-3 h-3\" : size === \"md\" ? \"w-3.5 h-3.5\" : \"w-4 h-4\"\n      )} />\n      {season === \"festival\" && festivalName ? festivalName : config.label}\n    </Badge>\n  );\n}\n","size_bytes":2413},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport Stripe from \"stripe\";\nimport { \n  updateProfileSchema, \n  ROLES, \n  ROLE_PERMISSIONS,\n  type User \n} from \"@shared/schema\";\n\n// Extend Express Request type\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n      isAuthenticated(): boolean;\n    }\n  }\n}\n\n// Initialize Stripe (will be null if secrets not set)\nlet stripe: Stripe | null = null;\nif (process.env.STRIPE_SECRET_KEY) {\n  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n    apiVersion: \"2025-09-30.clover\",\n  });\n}\n\n// Auth middleware\nfunction requireAuth(req: Request, res: Response, next: NextFunction) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}\n\n// Permission check helper\nfunction hasPermission(userRole: string, permission: string): boolean {\n  const permissions = ROLE_PERMISSIONS[userRole] || [];\n  return permissions.includes(permission);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Profile Settings\n  app.get(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/profile\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const validated = updateProfileSchema.parse(req.body);\n      const updated = await storage.updateUserProfile(user.id, validated);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Team Management\n  app.post(\"/api/teams\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const { name } = req.body;\n      const team = await storage.createTeam(name, user.id);\n      res.json(team);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const teams = await storage.getTeamsByUser(user.id);\n      res.json(teams);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams/:teamId\", requireAuth, async (req, res) => {\n    try {\n      const team = await storage.getTeam(req.params.teamId);\n      if (!team) {\n        return res.status(404).json({ message: \"Team not found\" });\n      }\n      res.json(team);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams/:teamId/members\", requireAuth, async (req, res) => {\n    try {\n      const members = await storage.getTeamMembers(req.params.teamId);\n      const membersWithUsers = await Promise.all(\n        members.map(async (member) => {\n          const user = await storage.getUser(member.userId);\n          return { ...member, user };\n        })\n      );\n      res.json(membersWithUsers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/teams/:teamId/invite\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const { email, role } = req.body;\n      \n      const invitation = await storage.createInvitation(\n        req.params.teamId,\n        email,\n        role || ROLES.MEMBER,\n        user.id\n      );\n      \n      res.json(invitation);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams/:teamId/invitations\", requireAuth, async (req, res) => {\n    try {\n      const invitations = await storage.getPendingInvitations(req.params.teamId);\n      res.json(invitations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/invitations/:invitationId\", requireAuth, async (req, res) => {\n    try {\n      await storage.deleteInvitation(req.params.invitationId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/team-members/:memberId/role\", requireAuth, async (req, res) => {\n    try {\n      const { role } = req.body;\n      const updated = await storage.updateTeamMemberRole(req.params.memberId, role);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/team-members/:memberId\", requireAuth, async (req, res) => {\n    try {\n      await storage.removeTeamMember(req.params.memberId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Stripe Payment Methods\n  app.post(\"/api/stripe/setup-intent\", requireAuth, async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Stripe not configured\" });\n      }\n\n      const user = req.user as User;\n      let customerId = user.stripeCustomerId;\n\n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: user.email || undefined,\n          metadata: { userId: user.id },\n        });\n        customerId = customer.id;\n        await storage.updateUserStripeCustomer(user.id, customerId);\n      }\n\n      const setupIntent = await stripe.setupIntents.create({\n        customer: customerId,\n      });\n\n      res.json({ clientSecret: setupIntent.client_secret });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/payment-methods\", requireAuth, async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Stripe not configured\" });\n      }\n\n      const user = req.user as User;\n      const { paymentMethodId } = req.body;\n\n      if (!user.stripeCustomerId) {\n        return res.status(400).json({ message: \"No Stripe customer ID\" });\n      }\n\n      await stripe.paymentMethods.attach(paymentMethodId, {\n        customer: user.stripeCustomerId,\n      });\n\n      const paymentMethod = await stripe.paymentMethods.retrieve(paymentMethodId);\n\n      const saved = await storage.addPaymentMethod(user.id, {\n        stripePaymentMethodId: paymentMethodId,\n        type: paymentMethod.type,\n        last4: paymentMethod.card?.last4 || \"\",\n        brand: paymentMethod.card?.brand || null,\n        expiryMonth: paymentMethod.card?.exp_month || null,\n        expiryYear: paymentMethod.card?.exp_year || null,\n        isDefault: false,\n      });\n\n      res.json(saved);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/payment-methods\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const methods = await storage.getPaymentMethods(user.id);\n      res.json(methods);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/payment-methods/:methodId/default\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      await storage.setDefaultPaymentMethod(user.id, req.params.methodId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/payment-methods/:methodId\", requireAuth, async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Stripe not configured\" });\n      }\n\n      const methods = await storage.getPaymentMethods((req.user as User).id);\n      const method = methods.find(m => m.id === req.params.methodId);\n      \n      if (method) {\n        await stripe.paymentMethods.detach(method.stripePaymentMethodId);\n        await storage.removePaymentMethod(req.params.methodId);\n      }\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Billing History\n  app.get(\"/api/billing-history\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const history = await storage.getBillingHistory(user.id);\n      res.json(history);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Notification Preferences\n  app.get(\"/api/notification-preferences\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const prefs = await storage.getNotificationPreferences(user.id);\n      res.json(prefs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/notification-preferences\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const updated = await storage.updateNotificationPreferences(user.id, req.body);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Security Settings\n  app.get(\"/api/security-settings\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const settings = await storage.getSecuritySettings(user.id);\n      res.json(settings);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/security-settings\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as User;\n      const updated = await storage.updateSecuritySettings(user.id, req.body);\n      res.json(updated);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9841},"client/src/pages/UploadInvoice.tsx":{"content":"import { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport UploadAndPreview from \"@/components/UploadAndPreview\";\nimport CategoryManager from \"@/components/CategoryManager\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function UploadInvoice() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar activeItem=\"Upload Invoice\" />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <div>\n                <h2 className=\"text-xl font-semibold\">Invoice Processing</h2>\n                <p className=\"text-sm text-muted-foreground\">Upload invoices and manage categories</p>\n              </div>\n            </div>\n            <ThemeToggle />\n          </header>\n          \n          <main className=\"flex-1 overflow-auto p-8\">\n            <Tabs defaultValue=\"upload\" className=\"space-y-6\">\n              <TabsList>\n                <TabsTrigger value=\"upload\" data-testid=\"tab-upload-invoice\">\n                  Upload & Preview\n                </TabsTrigger>\n                <TabsTrigger value=\"categories\" data-testid=\"tab-manage-categories\">\n                  Manage Categories\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"upload\">\n                <UploadAndPreview />\n              </TabsContent>\n\n              <TabsContent value=\"categories\">\n                <CategoryManager />\n              </TabsContent>\n            </Tabs>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":2028},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/VendorAnalysis.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Store, TrendingUp, TrendingDown, Calendar, DollarSign, Package, Star } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface VendorData {\n  id: string;\n  name: string;\n  purchases: number;\n  totalSpent: number;\n  avgPrice: number;\n  minPrice: number;\n  maxPrice: number;\n  lastPurchase: string;\n  firstPurchase: string;\n  priceChange: number;\n  quality: number;\n  reliability: number;\n  avgDeliveryTime: number;\n}\n\nconst mockVendors: VendorData[] = [\n  {\n    id: \"1\",\n    name: \"Fresh Farm Co\",\n    purchases: 12,\n    totalSpent: 1530,\n    avgPrice: 2.55,\n    minPrice: 2.40,\n    maxPrice: 2.70,\n    lastPurchase: \"2024-12-15\",\n    firstPurchase: \"2024-01-10\",\n    priceChange: 5,\n    quality: 4.8,\n    reliability: 95,\n    avgDeliveryTime: 2,\n  },\n  {\n    id: \"2\",\n    name: \"Green Valley\",\n    purchases: 8,\n    totalSpent: 880,\n    avgPrice: 2.75,\n    minPrice: 2.60,\n    maxPrice: 2.90,\n    lastPurchase: \"2024-12-14\",\n    firstPurchase: \"2024-02-15\",\n    priceChange: 8,\n    quality: 4.5,\n    reliability: 88,\n    avgDeliveryTime: 3,\n  },\n  {\n    id: \"3\",\n    name: \"Organic Fields\",\n    purchases: 5,\n    totalSpent: 525,\n    avgPrice: 2.95,\n    minPrice: 2.85,\n    maxPrice: 3.10,\n    lastPurchase: \"2024-12-10\",\n    firstPurchase: \"2024-03-20\",\n    priceChange: 3,\n    quality: 4.9,\n    reliability: 92,\n    avgDeliveryTime: 1,\n  },\n  {\n    id: \"4\",\n    name: \"Market Direct\",\n    purchases: 6,\n    totalSpent: 480,\n    avgPrice: 2.40,\n    minPrice: 2.30,\n    maxPrice: 2.50,\n    lastPurchase: \"2024-12-08\",\n    firstPurchase: \"2024-04-05\",\n    priceChange: -2,\n    quality: 4.2,\n    reliability: 85,\n    avgDeliveryTime: 4,\n  },\n];\n\nexport default function VendorAnalysis() {\n  const [selectedVendor, setSelectedVendor] = useState<VendorData | null>(null);\n\n  const bestPrice = mockVendors.reduce((min, v) => v.avgPrice < min.avgPrice ? v : min);\n  const mostPurchases = mockVendors.reduce((max, v) => v.purchases > max.purchases ? v : max);\n  const highestQuality = mockVendors.reduce((max, v) => v.quality > max.quality ? v : max);\n\n  return (\n    <div className=\"space-y-6\">\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-vendor-overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"comparison\" data-testid=\"tab-vendor-comparison\">Detailed Comparison</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <DollarSign className=\"w-4 h-4 text-chart-3\" />\n                <span className=\"text-sm text-muted-foreground\">Best Price</span>\n              </div>\n              <div className=\"font-bold\">{bestPrice.name}</div>\n              <div className=\"text-sm text-muted-foreground\">${bestPrice.avgPrice.toFixed(2)}/unit</div>\n            </Card>\n\n            <Card className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Package className=\"w-4 h-4 text-chart-1\" />\n                <span className=\"text-sm text-muted-foreground\">Most Purchased</span>\n              </div>\n              <div className=\"font-bold\">{mostPurchases.name}</div>\n              <div className=\"text-sm text-muted-foreground\">{mostPurchases.purchases} orders</div>\n            </Card>\n\n            <Card className=\"p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Star className=\"w-4 h-4 text-chart-4\" />\n                <span className=\"text-sm text-muted-foreground\">Highest Quality</span>\n              </div>\n              <div className=\"font-bold\">{highestQuality.name}</div>\n              <div className=\"text-sm text-muted-foreground\">{highestQuality.quality} rating</div>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {mockVendors.map((vendor, index) => {\n              const TrendIcon = vendor.priceChange >= 0 ? TrendingUp : TrendingDown;\n              \n              return (\n                <Card \n                  key={vendor.id}\n                  className=\"p-6 hover-elevate cursor-pointer\"\n                  onClick={() => setSelectedVendor(vendor)}\n                  data-testid={`vendor-card-${index}`}\n                >\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 rounded-md bg-gradient-to-br from-chart-1/20 to-chart-2/20 flex items-center justify-center\">\n                        <Store className=\"w-5 h-5 text-chart-1\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-bold\">{vendor.name}</h3>\n                        <div className=\"flex items-center gap-1 mt-1\">\n                          <Star className=\"w-3 h-3 fill-chart-4 text-chart-4\" />\n                          <span className=\"text-xs text-muted-foreground\">{vendor.quality}</span>\n                        </div>\n                      </div>\n                    </div>\n                    {vendor.id === bestPrice.id && (\n                      <Badge className=\"bg-chart-3 text-background\">Best Price</Badge>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <div className=\"text-xs text-muted-foreground mb-1\">Purchases</div>\n                      <div className=\"text-lg font-semibold\">{vendor.purchases}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs text-muted-foreground mb-1\">Total Spent</div>\n                      <div className=\"text-lg font-semibold\">${vendor.totalSpent}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs text-muted-foreground mb-1\">Avg Price</div>\n                      <div className=\"text-lg font-semibold\">${vendor.avgPrice.toFixed(2)}</div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs text-muted-foreground mb-1\">Price Trend</div>\n                      <div className=\"flex items-center gap-1\">\n                        <TrendIcon className={cn(\n                          \"w-3 h-3\",\n                          vendor.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                        )} />\n                        <span className={cn(\n                          \"text-sm font-semibold\",\n                          vendor.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                        )}>\n                          {vendor.priceChange >= 0 ? '+' : ''}{vendor.priceChange}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4 pt-4 border-t\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Last Purchase</span>\n                      <span className=\"font-medium\">{vendor.lastPurchase}</span>\n                    </div>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"comparison\" className=\"space-y-4\">\n          <Card className=\"overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted/50\">\n                  <tr>\n                    <th className=\"text-left p-4 font-semibold\">Vendor</th>\n                    <th className=\"text-right p-4 font-semibold\">Purchases</th>\n                    <th className=\"text-right p-4 font-semibold\">Total Spent</th>\n                    <th className=\"text-right p-4 font-semibold\">Avg Price</th>\n                    <th className=\"text-right p-4 font-semibold\">Price Range</th>\n                    <th className=\"text-right p-4 font-semibold\">Quality</th>\n                    <th className=\"text-right p-4 font-semibold\">Reliability</th>\n                    <th className=\"text-right p-4 font-semibold\">Avg Delivery</th>\n                    <th className=\"text-right p-4 font-semibold\">First Purchase</th>\n                    <th className=\"text-right p-4 font-semibold\">Last Purchase</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {mockVendors.map((vendor, index) => (\n                    <tr \n                      key={vendor.id}\n                      className=\"border-b hover-elevate cursor-pointer\"\n                      onClick={() => setSelectedVendor(vendor)}\n                      data-testid={`vendor-row-${index}`}\n                    >\n                      <td className=\"p-4\">\n                        <div className=\"font-medium\">{vendor.name}</div>\n                      </td>\n                      <td className=\"p-4 text-right\">{vendor.purchases}</td>\n                      <td className=\"p-4 text-right font-semibold\">${vendor.totalSpent}</td>\n                      <td className=\"p-4 text-right\">${vendor.avgPrice.toFixed(2)}</td>\n                      <td className=\"p-4 text-right text-sm text-muted-foreground\">\n                        ${vendor.minPrice.toFixed(2)} - ${vendor.maxPrice.toFixed(2)}\n                      </td>\n                      <td className=\"p-4 text-right\">\n                        <div className=\"flex items-center justify-end gap-1\">\n                          <Star className=\"w-3 h-3 fill-chart-4 text-chart-4\" />\n                          <span>{vendor.quality}</span>\n                        </div>\n                      </td>\n                      <td className=\"p-4 text-right\">{vendor.reliability}%</td>\n                      <td className=\"p-4 text-right\">{vendor.avgDeliveryTime} days</td>\n                      <td className=\"p-4 text-right text-sm text-muted-foreground\">\n                        {vendor.firstPurchase}\n                      </td>\n                      <td className=\"p-4 text-right text-sm text-muted-foreground\">\n                        {vendor.lastPurchase}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {selectedVendor && (\n        <Card className=\"p-6 border-chart-1\">\n          <div className=\"flex items-start justify-between mb-6\">\n            <div>\n              <h3 className=\"text-2xl font-bold mb-2\">{selectedVendor.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">Detailed vendor performance metrics</p>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setSelectedVendor(null)}\n              data-testid=\"button-close-vendor-detail\"\n            >\n              Close\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"p-4 rounded-md bg-muted/30\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Total Orders</div>\n              <div className=\"text-2xl font-bold\">{selectedVendor.purchases}</div>\n            </div>\n            <div className=\"p-4 rounded-md bg-muted/30\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Total Spent</div>\n              <div className=\"text-2xl font-bold\">${selectedVendor.totalSpent}</div>\n            </div>\n            <div className=\"p-4 rounded-md bg-muted/30\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Avg Price</div>\n              <div className=\"text-2xl font-bold\">${selectedVendor.avgPrice.toFixed(2)}</div>\n            </div>\n            <div className=\"p-4 rounded-md bg-muted/30\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Quality Score</div>\n              <div className=\"text-2xl font-bold\">{selectedVendor.quality}</div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Pricing Details</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Minimum Price</span>\n                  <span className=\"font-semibold\">${selectedVendor.minPrice.toFixed(2)}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Maximum Price</span>\n                  <span className=\"font-semibold\">${selectedVendor.maxPrice.toFixed(2)}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Average Price</span>\n                  <span className=\"font-semibold\">${selectedVendor.avgPrice.toFixed(2)}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Price Variation</span>\n                  <span className=\"font-semibold\">\n                    ${(selectedVendor.maxPrice - selectedVendor.minPrice).toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Performance Metrics</h4>\n              <div className=\"space-y-3\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Quality Rating</span>\n                    <span className=\"font-semibold\">{selectedVendor.quality}/5.0</span>\n                  </div>\n                  <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-chart-4\" \n                      style={{ width: `${(selectedVendor.quality / 5) * 100}%` }} \n                    />\n                  </div>\n                </div>\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-muted-foreground\">Reliability Score</span>\n                    <span className=\"font-semibold\">{selectedVendor.reliability}%</span>\n                  </div>\n                  <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-chart-3\" \n                      style={{ width: `${selectedVendor.reliability}%` }} \n                    />\n                  </div>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Avg Delivery Time</span>\n                  <span className=\"font-semibold\">{selectedVendor.avgDeliveryTime} days</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 pt-6 border-t grid grid-cols-2 gap-4\">\n            <div>\n              <div className=\"text-sm text-muted-foreground mb-1\">First Purchase</div>\n              <div className=\"font-medium flex items-center gap-2\">\n                <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                {selectedVendor.firstPurchase}\n              </div>\n            </div>\n            <div>\n              <div className=\"text-sm text-muted-foreground mb-1\">Last Purchase</div>\n              <div className=\"font-medium flex items-center gap-2\">\n                <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                {selectedVendor.lastPurchase}\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16370},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/Hero.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, Sparkles, TrendingUp, LogIn } from \"lucide-react\";\nimport heroImage from \"@assets/generated_images/AI_invoice_dashboard_hero_background_b30c793b.png\";\nimport AuthModal from \"./AuthModal\";\nimport ThemeToggle from \"./ThemeToggle\";\n\nexport default function Hero() {\n  const [authModalOpen, setAuthModalOpen] = useState(false);\n  const [authTab, setAuthTab] = useState<\"login\" | \"register\">(\"register\");\n\n  const handleGetStarted = () => {\n    setAuthTab(\"register\");\n    setAuthModalOpen(true);\n  };\n\n  const handleLogin = () => {\n    setAuthTab(\"login\");\n    setAuthModalOpen(true);\n  };\n\n  const handleViewDemo = () => {\n    console.log(\"View Demo clicked\");\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      <div \n        className=\"absolute inset-0 z-0\"\n        style={{\n          backgroundImage: `url(${heroImage})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-background\"></div>\n      </div>\n\n      <div className=\"absolute top-0 left-0 right-0 z-20 flex items-center justify-between p-6\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 rounded-md bg-gradient-to-br from-chart-1 to-chart-2 flex items-center justify-center\">\n            <Sparkles className=\"w-4 h-4 text-white\" />\n          </div>\n          <span className=\"text-xl font-bold\">InvoiceAI</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"p-2 rounded-md backdrop-blur-md bg-background/80 dark:bg-background/40 border border-border/50\">\n            <ThemeToggle />\n          </div>\n          <Button \n            variant=\"default\"\n            className=\"backdrop-blur-md bg-primary/90 hover:bg-primary\"\n            onClick={handleLogin}\n            data-testid=\"button-login-hero\"\n          >\n            <LogIn className=\"w-4 h-4 mr-2\" />\n            Login\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-32 text-center\">\n        <div className=\"flex items-center justify-center gap-2 mb-6\">\n          <Sparkles className=\"w-6 h-6 text-chart-3\" />\n          <span className=\"text-chart-3 text-sm font-medium tracking-wide uppercase\">AI-Powered Analysis</span>\n        </div>\n\n        <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-bold mb-6 bg-gradient-to-r from-chart-1 via-chart-2 to-chart-1 bg-clip-text text-transparent\">\n          Transform Your Invoice\n          <br />\n          Management with AI\n        </h1>\n\n        <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto mb-12\">\n          Perfect for individuals and businesses. Automate invoice data extraction, categorize items intelligently, track price trends, and gain actionable insights—all powered by advanced AI.\n        </p>\n\n        <div className=\"flex flex-wrap items-center justify-center gap-4\">\n          <Button \n            size=\"lg\" \n            variant=\"default\"\n            className=\"font-semibold px-8 h-12 text-base\"\n            onClick={handleGetStarted}\n            data-testid=\"button-get-started\"\n          >\n            <Upload className=\"w-5 h-5 mr-2\" />\n            Get Started Free\n          </Button>\n          <Button \n            size=\"lg\" \n            variant=\"outline\" \n            className=\"backdrop-blur-md bg-background/10 border-2 h-12 px-8 text-base\"\n            onClick={handleViewDemo}\n            data-testid=\"button-view-demo\"\n          >\n            <TrendingUp className=\"w-5 h-5 mr-2\" />\n            View Demo\n          </Button>\n        </div>\n\n        <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-foreground mb-2\">99%</div>\n            <div className=\"text-sm text-muted-foreground\">Extraction Accuracy</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-foreground mb-2\">10x</div>\n            <div className=\"text-sm text-muted-foreground\">Faster Processing</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-foreground mb-2\">24/7</div>\n            <div className=\"text-sm text-muted-foreground\">Automated Tracking</div>\n          </div>\n        </div>\n      </div>\n\n      <AuthModal \n        open={authModalOpen} \n        onOpenChange={setAuthModalOpen}\n        defaultTab={authTab}\n      />\n    </section>\n  );\n}\n","size_bytes":4752},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/InvoiceUpload.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, FileText, X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function InvoiceUpload() {\n  const [isDragging, setIsDragging] = useState(false);\n  const [files, setFiles] = useState<File[]>([]);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    setFiles(prev => [...prev, ...droppedFiles]);\n    console.log(\"Files dropped:\", droppedFiles);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const selectedFiles = Array.from(e.target.files);\n      setFiles(prev => [...prev, ...selectedFiles]);\n      console.log(\"Files selected:\", selectedFiles);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleUpload = () => {\n    console.log(\"Uploading files:\", files);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card\n        className={cn(\n          \"p-12 border-2 border-dashed transition-all duration-200\",\n          isDragging && \"border-chart-3 bg-chart-3/5\"\n        )}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        data-testid=\"dropzone-invoice\"\n      >\n        <div className=\"flex flex-col items-center justify-center text-center\">\n          <div className={cn(\n            \"w-20 h-20 rounded-full flex items-center justify-center mb-6 transition-colors\",\n            isDragging ? \"bg-chart-3 text-background\" : \"bg-gradient-to-br from-chart-1 to-chart-2 text-white\"\n          )}>\n            <Upload className=\"w-10 h-10\" />\n          </div>\n\n          <h3 className=\"text-2xl font-semibold mb-2\">Upload Your Invoices</h3>\n          <p className=\"text-muted-foreground mb-6 max-w-md\">\n            Drag and drop your invoice files here, or click to browse. Supports PDF, JPG, PNG formats.\n          </p>\n\n          <input\n            type=\"file\"\n            multiple\n            accept=\".pdf,.jpg,.jpeg,.png\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            id=\"file-upload\"\n            data-testid=\"input-file-upload\"\n          />\n          <label htmlFor=\"file-upload\">\n            <Button asChild variant=\"default\">\n              <span data-testid=\"button-browse-files\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Browse Files\n              </span>\n            </Button>\n          </label>\n\n          <p className=\"text-xs text-muted-foreground mt-4\">\n            Maximum file size: 10MB per file\n          </p>\n        </div>\n      </Card>\n\n      {files.length > 0 && (\n        <Card className=\"p-6\">\n          <h4 className=\"font-semibold mb-4\">Selected Files ({files.length})</h4>\n          <div className=\"space-y-2 mb-6\">\n            {files.map((file, index) => (\n              <div \n                key={index} \n                className=\"flex items-center gap-3 p-3 rounded-md bg-muted/50 hover-elevate\"\n                data-testid={`file-item-${index}`}\n              >\n                <FileText className=\"w-5 h-5 text-chart-1\" />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {(file.size / 1024).toFixed(2)} KB\n                  </p>\n                </div>\n                <button\n                  onClick={() => removeFile(index)}\n                  className=\"p-1 hover-elevate rounded-sm\"\n                  data-testid={`button-remove-file-${index}`}\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n            ))}\n          </div>\n\n          <Button \n            onClick={handleUpload} \n            variant=\"default\"\n            className=\"w-full\"\n            data-testid=\"button-upload-process\"\n          >\n            Process with AI\n          </Button>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":4366},"client/src/components/CategoryDetail.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileDown, TrendingUp, TrendingDown, ArrowLeft } from \"lucide-react\";\nimport PriceChart from \"./PriceChart\";\nimport SeasonalInsights from \"./SeasonalInsights\";\nimport VendorAnalysis from \"./VendorAnalysis\";\nimport SeasonalAlert from \"./SeasonalAlert\";\nimport SeasonalBadge, { SeasonType } from \"./SeasonalBadge\";\n\nconst mockPurchaseHistory = [\n  { date: \"2024-12-15\", vendor: \"Fresh Farm Co\", quantity: 50, unit: \"kg\", unitPrice: 2.5, total: 125 },\n  { date: \"2024-12-01\", vendor: \"Green Valley\", quantity: 40, unit: \"kg\", unitPrice: 2.8, total: 112 },\n  { date: \"2024-11-15\", vendor: \"Fresh Farm Co\", quantity: 45, unit: \"kg\", unitPrice: 2.6, total: 117 },\n  { date: \"2024-11-01\", vendor: \"Organic Fields\", quantity: 35, unit: \"kg\", unitPrice: 3.0, total: 105 },\n];\n\nconst vendorAnalysis = [\n  { vendor: \"Fresh Farm Co\", purchases: 12, avgPrice: 2.55, totalSpent: 1530 },\n  { vendor: \"Green Valley\", purchases: 8, avgPrice: 2.75, totalSpent: 880 },\n  { vendor: \"Organic Fields\", purchases: 5, avgPrice: 2.95, totalSpent: 525 },\n];\n\ninterface CategoryDetailProps {\n  categoryName?: string;\n  onBack?: () => void;\n  season?: SeasonType;\n  festivalName?: string;\n}\n\nexport default function CategoryDetail({ \n  categoryName = \"Tomatoes\", \n  onBack,\n  season = \"summer\",\n  festivalName\n}: CategoryDetailProps) {\n  const handleExport = () => {\n    console.log(\"Exporting data to CSV\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          {onBack && (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onBack}\n              data-testid=\"button-back-categories\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n          )}\n          <div>\n            <div className=\"flex items-center gap-3 mb-2\">\n              <h1 className=\"text-3xl font-bold\">{categoryName}</h1>\n              <SeasonalBadge season={season} festivalName={festivalName} size=\"lg\" />\n            </div>\n            <p className=\"text-muted-foreground\">Complete purchase history and analytics</p>\n          </div>\n        </div>\n        <Button \n          onClick={handleExport}\n          variant=\"default\"\n          data-testid=\"button-export-csv\"\n        >\n          <FileDown className=\"w-4 h-4 mr-2\" />\n          Export CSV\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-muted-foreground\">Total Purchases</span>\n            <TrendingUp className=\"w-4 h-4 text-chart-4\" />\n          </div>\n          <div className=\"text-3xl font-bold\">25</div>\n          <p className=\"text-xs text-muted-foreground mt-1\">Last 12 months</p>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-muted-foreground\">Avg Unit Price</span>\n          </div>\n          <div className=\"text-3xl font-bold\">$2.65</div>\n          <div className=\"flex items-center gap-1 mt-1\">\n            <TrendingUp className=\"w-3 h-3 text-chart-4\" />\n            <span className=\"text-xs text-chart-4\">+8% vs last year</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-muted-foreground\">Top Vendor</span>\n          </div>\n          <div className=\"text-xl font-bold mb-1\">Fresh Farm Co</div>\n          <p className=\"text-xs text-muted-foreground\">12 purchases</p>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-muted-foreground\">Price Trend</span>\n          </div>\n          <div className=\"text-3xl font-bold text-chart-4\">+12%</div>\n          <div className=\"flex items-center gap-1 mt-1\">\n            <TrendingUp className=\"w-3 h-3 text-chart-4\" />\n            <span className=\"text-xs text-muted-foreground\">Past 6 months</span>\n          </div>\n        </Card>\n      </div>\n\n      <PriceChart title=\"Price Fluctuation Analysis\" />\n\n      {(season === \"festival\" || season !== \"year-round\") && (\n        <SeasonalAlert />\n      )}\n\n      <div>\n        <h2 className=\"text-2xl font-bold mb-4\">Vendor Analysis</h2>\n        <VendorAnalysis />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"p-6\">\n          <h3 className=\"text-xl font-semibold mb-4\">Recent Purchases</h3>\n          <div className=\"space-y-3\">\n            {mockPurchaseHistory.map((purchase, index) => (\n              <div \n                key={index}\n                className=\"flex items-center justify-between p-3 rounded-md border hover-elevate\"\n                data-testid={`purchase-${index}`}\n              >\n                <div>\n                  <div className=\"font-medium\">{purchase.vendor}</div>\n                  <div className=\"text-xs text-muted-foreground\">{purchase.date}</div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold\">${purchase.total.toFixed(2)}</div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {purchase.quantity} {purchase.unit} @ ${purchase.unitPrice}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h3 className=\"text-xl font-semibold mb-4\">Quality Metrics</h3>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">Consistency Score</span>\n                <span className=\"font-semibold\">92%</span>\n              </div>\n              <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                <div className=\"h-full bg-gradient-to-r from-chart-1 to-chart-2\" style={{ width: '92%' }} />\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">Price Stability</span>\n                <span className=\"font-semibold\">85%</span>\n              </div>\n              <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                <div className=\"h-full bg-chart-4\" style={{ width: '85%' }} />\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-muted-foreground\">Availability</span>\n                <span className=\"font-semibold\">98%</span>\n              </div>\n              <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                <div className=\"h-full bg-chart-3\" style={{ width: '98%' }} />\n              </div>\n            </div>\n\n            <div className=\"pt-4 border-t\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold\">4.8</div>\n                  <div className=\"text-xs text-muted-foreground\">Avg Rating</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">12</div>\n                  <div className=\"text-xs text-muted-foreground\">Vendors</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7866},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/CategoryManager.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Plus, X, Tag, Edit2, Trash2 } from \"lucide-react\";\n\ninterface Category {\n  id: string;\n  name: string;\n  aliases: string[];\n}\n\nconst mockCategories: Category[] = [\n  { id: \"1\", name: \"Tomatoes\", aliases: [\"Tom\", \"Tom TM\", \"Toma\", \"Tomato\"] },\n  { id: \"2\", name: \"Onions\", aliases: [\"Onion\", \"Red Onion\", \"White Onion\"] },\n  { id: \"3\", name: \"Milk\", aliases: [\"Whole Milk\", \"Skim Milk\", \"Dairy Milk\"] },\n];\n\nexport default function CategoryManager() {\n  const [categories, setCategories] = useState<Category[]>(mockCategories);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [newAlias, setNewAlias] = useState(\"\");\n  const [currentAliases, setCurrentAliases] = useState<string[]>([]);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n\n  const handleAddCategory = () => {\n    if (!newCategoryName.trim()) return;\n\n    const newCategory: Category = {\n      id: Date.now().toString(),\n      name: newCategoryName,\n      aliases: currentAliases,\n    };\n\n    if (editingCategory) {\n      setCategories(categories.map(cat => \n        cat.id === editingCategory.id \n          ? { ...cat, name: newCategoryName, aliases: currentAliases }\n          : cat\n      ));\n      console.log(\"Updated category:\", newCategoryName, \"with aliases:\", currentAliases);\n    } else {\n      setCategories([...categories, newCategory]);\n      console.log(\"Added category:\", newCategoryName, \"with aliases:\", currentAliases);\n    }\n\n    setNewCategoryName(\"\");\n    setCurrentAliases([]);\n    setEditingCategory(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleAddAlias = () => {\n    if (!newAlias.trim() || currentAliases.includes(newAlias.trim())) return;\n    setCurrentAliases([...currentAliases, newAlias.trim()]);\n    setNewAlias(\"\");\n  };\n\n  const handleRemoveAlias = (alias: string) => {\n    setCurrentAliases(currentAliases.filter(a => a !== alias));\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    setNewCategoryName(category.name);\n    setCurrentAliases([...category.aliases]);\n    setIsDialogOpen(true);\n  };\n\n  const handleDeleteCategory = (id: string) => {\n    setCategories(categories.filter(cat => cat.id !== id));\n    console.log(\"Deleted category:\", id);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setNewCategoryName(\"\");\n    setCurrentAliases([]);\n    setEditingCategory(null);\n    setNewAlias(\"\");\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Category Management</h3>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Create categories and define aliases for auto-matching\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              onClick={() => handleCloseDialog()}\n              variant=\"default\"\n              data-testid=\"button-add-category\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Category\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? \"Edit Category\" : \"Create New Category\"}\n              </DialogTitle>\n              <DialogDescription>\n                Define a category name and add aliases that should match this category\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category-name\">Category Name</Label>\n                <Input\n                  id=\"category-name\"\n                  placeholder=\"e.g., Tomatoes\"\n                  value={newCategoryName}\n                  onChange={(e) => setNewCategoryName(e.target.value)}\n                  data-testid=\"input-category-name\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Aliases / Alternative Names</Label>\n                <p className=\"text-xs text-muted-foreground mb-2\">\n                  Add variations that should be recognized as this category\n                </p>\n                \n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"e.g., Tom, Tom TM, Toma\"\n                    value={newAlias}\n                    onChange={(e) => setNewAlias(e.target.value)}\n                    onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), handleAddAlias())}\n                    data-testid=\"input-alias\"\n                  />\n                  <Button \n                    onClick={handleAddAlias}\n                    variant=\"outline\"\n                    data-testid=\"button-add-alias\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n\n                {currentAliases.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-3 p-3 rounded-md bg-muted/30\">\n                    {currentAliases.map((alias, index) => (\n                      <Badge \n                        key={index} \n                        variant=\"secondary\" \n                        className=\"gap-1\"\n                        data-testid={`badge-alias-${index}`}\n                      >\n                        <Tag className=\"w-3 h-3\" />\n                        {alias}\n                        <button\n                          onClick={() => handleRemoveAlias(alias)}\n                          className=\"ml-1 hover-elevate rounded-sm\"\n                          data-testid={`button-remove-alias-${index}`}\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  onClick={handleCloseDialog}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-category\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleAddCategory}\n                  disabled={!newCategoryName.trim()}\n                  variant=\"default\"\n                  className=\"flex-1\"\n                  data-testid=\"button-save-category\"\n                >\n                  {editingCategory ? \"Update\" : \"Create\"} Category\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"space-y-3\">\n        {categories.map((category, index) => (\n          <div \n            key={category.id}\n            className=\"p-4 rounded-md border hover-elevate\"\n            data-testid={`category-item-${index}`}\n          >\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-lg\">{category.name}</h4>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {category.aliases.length} {category.aliases.length === 1 ? 'alias' : 'aliases'}\n                </p>\n              </div>\n              <div className=\"flex gap-1\">\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"h-8 w-8\"\n                  onClick={() => handleEditCategory(category)}\n                  data-testid={`button-edit-category-${index}`}\n                >\n                  <Edit2 className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  className=\"h-8 w-8 text-destructive\"\n                  onClick={() => handleDeleteCategory(category.id)}\n                  data-testid={`button-delete-category-${index}`}\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex flex-wrap gap-2\">\n              {category.aliases.map((alias, aliasIndex) => (\n                <Badge \n                  key={aliasIndex} \n                  variant=\"outline\"\n                  className=\"text-xs\"\n                  data-testid={`alias-${index}-${aliasIndex}`}\n                >\n                  <Tag className=\"w-3 h-3 mr-1\" />\n                  {alias}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":9199},"client/src/components/RecentInvoices.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Eye } from \"lucide-react\";\n\nconst recentInvoices = [\n  { id: \"INV-2024-048\", vendor: \"Fresh Farm Co\", date: \"2024-12-15\", items: 12, total: 1245.50, status: \"processed\" },\n  { id: \"INV-2024-047\", vendor: \"Dairy Direct\", date: \"2024-12-14\", items: 8, total: 890.00, status: \"processed\" },\n  { id: \"INV-2024-046\", vendor: \"Meat Masters\", date: \"2024-12-12\", items: 5, total: 2150.75, status: \"processed\" },\n  { id: \"INV-2024-045\", vendor: \"Green Valley\", date: \"2024-12-10\", items: 15, total: 1680.25, status: \"processed\" },\n  { id: \"INV-2024-044\", vendor: \"Organic Fields\", date: \"2024-12-08\", items: 10, total: 1320.00, status: \"processed\" },\n];\n\nexport default function RecentInvoices() {\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold\">Recent Invoices</h3>\n        <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-invoices\">\n          View All\n        </Button>\n      </div>\n\n      <div className=\"space-y-3\">\n        {recentInvoices.map((invoice, index) => (\n          <div \n            key={invoice.id}\n            className=\"flex items-center justify-between p-3 rounded-md border hover-elevate\"\n            data-testid={`invoice-item-${index}`}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-md bg-gradient-to-br from-chart-1/20 to-chart-2/20 flex items-center justify-center\">\n                <FileText className=\"w-5 h-5 text-chart-1\" />\n              </div>\n              <div>\n                <div className=\"font-medium\">{invoice.id}</div>\n                <div className=\"text-xs text-muted-foreground\">{invoice.vendor}</div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-right\">\n                <div className=\"text-sm font-semibold\">${invoice.total.toFixed(2)}</div>\n                <div className=\"text-xs text-muted-foreground\">{invoice.items} items</div>\n              </div>\n              <div className=\"text-xs text-muted-foreground min-w-20 text-right\">{invoice.date}</div>\n              <Badge variant=\"secondary\" className=\"min-w-20 justify-center\">\n                {invoice.status}\n              </Badge>\n              <Button size=\"icon\" variant=\"ghost\" className=\"h-8 w-8\" data-testid={`button-view-invoice-${index}`}>\n                <Eye className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2716},"client/src/components/examples/CategoriesGrid.tsx":{"content":"import CategoriesGrid from '../CategoriesGrid';\n\nexport default function CategoriesGridExample() {\n  return (\n    <div className=\"p-8\">\n      <CategoriesGrid onSelectCategory={(id, name) => console.log('Selected:', id, name)} />\n    </div>\n  );\n}\n","size_bytes":247},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Footer.tsx":{"content":"import { Sparkles } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"border-t border-border py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <div className=\"w-8 h-8 rounded-md bg-gradient-to-br from-chart-1 to-chart-2 flex items-center justify-center\">\n                <Sparkles className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold\">InvoiceAI</span>\n            </div>\n            <p className=\"text-muted-foreground max-w-sm\">\n              AI-powered invoice analysis platform helping businesses automate data extraction and gain valuable insights.\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">Product</h4>\n            <ul className=\"space-y-2 text-muted-foreground text-sm\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Features</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Pricing</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Security</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">API</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2 text-muted-foreground text-sm\">\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">About</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Blog</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact</a></li>\n              <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy</a></li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"pt-8 border-t border-border text-center text-sm text-muted-foreground\">\n          <p>&copy; 2025 InvoiceAI. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2264},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/UploadAndPreview.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, FileText, X, Edit2, Trash2, RefreshCw, Save, Sparkles, MessageSquare } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ExtractedItem {\n  id: string;\n  item: string;\n  quantity: number;\n  unit: string;\n  unitPrice: number;\n  total: number;\n  vendor: string;\n  category: string;\n  confidence: number;\n}\n\nconst mockCategories = [\"Vegetables\", \"Fruits\", \"Dairy\", \"Meat\", \"Grains\", \"Beverages\"];\n\nconst mockExtractedData: ExtractedItem[] = [\n  { id: \"1\", item: \"Tomatoes\", quantity: 50, unit: \"kg\", unitPrice: 2.5, total: 125, vendor: \"Fresh Farm Co\", category: \"Vegetables\", confidence: 98 },\n  { id: \"2\", item: \"Onions\", quantity: 30, unit: \"kg\", unitPrice: 1.8, total: 54, vendor: \"Fresh Farm Co\", category: \"Vegetables\", confidence: 95 },\n  { id: \"3\", item: \"Milk\", quantity: 100, unit: \"L\", unitPrice: 1.2, total: 120, vendor: \"Dairy Direct\", category: \"Dairy\", confidence: 99 },\n];\n\nexport default function UploadAndPreview() {\n  const [files, setFiles] = useState<File[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [extractedItems, setExtractedItems] = useState<ExtractedItem[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [feedback, setFeedback] = useState(\"\");\n  const [isReExtracting, setIsReExtracting] = useState(false);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragging(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const droppedFiles = Array.from(e.dataTransfer.files);\n    setFiles(prev => [...prev, ...droppedFiles]);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const selectedFiles = Array.from(e.target.files);\n      setFiles(prev => [...prev, ...selectedFiles]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleProcess = () => {\n    setIsProcessing(true);\n    console.log(\"Processing files with AI...\", files);\n    setTimeout(() => {\n      setExtractedItems(mockExtractedData);\n      setIsProcessing(false);\n    }, 1500);\n  };\n\n  const handleSaveAll = () => {\n    console.log(\"Saving all items:\", extractedItems);\n    setFiles([]);\n    setExtractedItems([]);\n  };\n\n  const handleCategoryChange = (id: string, category: string) => {\n    setExtractedItems(items => items.map(item => \n      item.id === id ? { ...item, category } : item\n    ));\n  };\n\n  const handleDelete = (id: string) => {\n    setExtractedItems(items => items.filter(item => item.id !== id));\n  };\n\n  const handleReExtract = () => {\n    if (!feedback.trim()) {\n      console.log(\"Please provide feedback\");\n      return;\n    }\n    \n    setIsReExtracting(true);\n    console.log(\"Re-extracting with feedback:\", feedback);\n    \n    setTimeout(() => {\n      console.log(\"AI re-extraction complete with feedback:\", feedback);\n      setIsReExtracting(false);\n      setFeedback(\"\");\n    }, 2000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card\n        className={cn(\n          \"p-8 border-2 border-dashed transition-all duration-200\",\n          isDragging && \"border-chart-3 bg-chart-3/5\"\n        )}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        data-testid=\"dropzone-upload\"\n      >\n        <div className=\"flex flex-col items-center justify-center text-center\">\n          <div className={cn(\n            \"w-16 h-16 rounded-full flex items-center justify-center mb-4 transition-colors\",\n            isDragging ? \"bg-chart-3 text-background\" : \"bg-gradient-to-br from-chart-1 to-chart-2 text-white\"\n          )}>\n            <Upload className=\"w-8 h-8\" />\n          </div>\n\n          <h3 className=\"text-xl font-semibold mb-2\">Upload Invoice</h3>\n          <p className=\"text-sm text-muted-foreground mb-4 max-w-md\">\n            Drag and drop files or click to browse. Supports PDF, JPG, PNG\n          </p>\n\n          <input\n            type=\"file\"\n            multiple\n            accept=\".pdf,.jpg,.jpeg,.png\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            id=\"file-upload-main\"\n            data-testid=\"input-file-upload-main\"\n          />\n          <label htmlFor=\"file-upload-main\">\n            <Button asChild size=\"sm\" variant=\"default\">\n              <span data-testid=\"button-browse\">Browse Files</span>\n            </Button>\n          </label>\n        </div>\n\n        {files.length > 0 && (\n          <div className=\"mt-6 pt-6 border-t\">\n            <div className=\"space-y-2 mb-4\">\n              {files.map((file, index) => (\n                <div \n                  key={index} \n                  className=\"flex items-center gap-3 p-2 rounded-md bg-muted/30\"\n                  data-testid={`uploaded-file-${index}`}\n                >\n                  <FileText className=\"w-4 h-4 text-chart-1\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                  </div>\n                  <button\n                    onClick={() => removeFile(index)}\n                    className=\"p-1 hover-elevate rounded-sm\"\n                    data-testid={`button-remove-${index}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              ))}\n            </div>\n\n            <Button \n              onClick={handleProcess} \n              variant=\"default\"\n              className=\"w-full\"\n              disabled={isProcessing}\n              data-testid=\"button-process-ai\"\n            >\n              {isProcessing ? (\n                <>\n                  <Sparkles className=\"w-4 h-4 mr-2 animate-pulse\" />\n                  Processing with AI...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Extract Data with AI\n                </>\n              )}\n            </Button>\n          </div>\n        )}\n      </Card>\n\n      {extractedItems.length > 0 && (\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h3 className=\"text-xl font-semibold\">Extracted Data Preview</h3>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Review and categorize before saving\n              </p>\n            </div>\n            <Button \n              onClick={handleSaveAll}\n              variant=\"default\"\n              data-testid=\"button-save-all-items\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save All\n            </Button>\n          </div>\n\n          <div className=\"mb-6 p-4 rounded-md bg-muted/30 border\">\n            <div className=\"flex items-start gap-3\">\n              <MessageSquare className=\"w-5 h-5 text-chart-1 mt-1 flex-shrink-0\" />\n              <div className=\"flex-1 space-y-3\">\n                <div>\n                  <h4 className=\"font-medium mb-1\">Missing or Incorrect Data?</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Describe what's missing or needs correction, and we'll re-extract the data using AI.\n                  </p>\n                </div>\n                <Textarea\n                  placeholder=\"Example: Missing unit for Tomatoes, incorrect price for Onions, vendor name is not extracted...\"\n                  value={feedback}\n                  onChange={(e) => setFeedback(e.target.value)}\n                  className=\"min-h-20\"\n                  data-testid=\"textarea-feedback\"\n                />\n                <Button \n                  onClick={handleReExtract}\n                  disabled={!feedback.trim() || isReExtracting}\n                  variant=\"outline\"\n                  className=\"w-full sm:w-auto\"\n                  data-testid=\"button-reextract-feedback\"\n                >\n                  {isReExtracting ? (\n                    <>\n                      <Sparkles className=\"w-4 h-4 mr-2 animate-pulse\" />\n                      Re-extracting with AI...\n                    </>\n                  ) : (\n                    <>\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Re-Extract with Feedback\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\" data-testid=\"table-extracted-preview\">\n              <thead>\n                <tr className=\"border-b text-sm\">\n                  <th className=\"text-left p-3 font-semibold\">Item</th>\n                  <th className=\"text-left p-3 font-semibold\">Qty</th>\n                  <th className=\"text-left p-3 font-semibold\">Price</th>\n                  <th className=\"text-left p-3 font-semibold\">Total</th>\n                  <th className=\"text-left p-3 font-semibold\">Vendor</th>\n                  <th className=\"text-left p-3 font-semibold\">Category</th>\n                  <th className=\"text-left p-3 font-semibold\">AI</th>\n                  <th className=\"text-left p-3 font-semibold\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {extractedItems.map((item, index) => (\n                  <tr \n                    key={item.id} \n                    className=\"border-b hover-elevate text-sm\"\n                    data-testid={`preview-row-${index}`}\n                  >\n                    <td className=\"p-3 font-medium\">{item.item}</td>\n                    <td className=\"p-3\">{item.quantity} {item.unit}</td>\n                    <td className=\"p-3\">${item.unitPrice.toFixed(2)}</td>\n                    <td className=\"p-3 font-semibold\">${item.total.toFixed(2)}</td>\n                    <td className=\"p-3 text-muted-foreground\">{item.vendor}</td>\n                    <td className=\"p-3\">\n                      <Select \n                        value={item.category} \n                        onValueChange={(value) => handleCategoryChange(item.id, value)}\n                      >\n                        <SelectTrigger className=\"h-8 w-32\" data-testid={`select-preview-category-${index}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {mockCategories.map((cat) => (\n                            <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </td>\n                    <td className=\"p-3\">\n                      <Badge \n                        variant={item.confidence >= 95 ? \"default\" : \"secondary\"}\n                        className=\"text-xs\"\n                      >\n                        {item.confidence}%\n                      </Badge>\n                    </td>\n                    <td className=\"p-3\">\n                      <div className=\"flex gap-1\">\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8\"\n                          onClick={() => console.log(\"Re-extract\", item.id)}\n                          data-testid={`button-preview-reextract-${index}`}\n                        >\n                          <RefreshCw className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          size=\"icon\"\n                          variant=\"ghost\"\n                          className=\"h-8 w-8 text-destructive\"\n                          onClick={() => handleDelete(item.id)}\n                          data-testid={`button-preview-delete-${index}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":12677},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/examples/CategoryList.tsx":{"content":"import { useState } from \"react\";\nimport CategoryList from '../CategoryList';\n\nexport default function CategoryListExample() {\n  const [selected, setSelected] = useState(\"1\");\n  \n  return (\n    <div className=\"p-8 max-w-md\">\n      <CategoryList selectedId={selected} onSelect={setSelected} />\n    </div>\n  );\n}\n","size_bytes":311},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/examples/DataPreviewTable.tsx":{"content":"import DataPreviewTable from '../DataPreviewTable';\n\nexport default function DataPreviewTableExample() {\n  return (\n    <div className=\"p-8\">\n      <DataPreviewTable />\n    </div>\n  );\n}\n","size_bytes":187},"client/src/components/AppSidebar.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { LayoutDashboard, Upload, FolderTree, Settings, Sparkles, LogOut } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Link } from \"wouter\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    icon: LayoutDashboard,\n  },\n  {\n    title: \"Upload Invoice\",\n    url: \"/upload\",\n    icon: Upload,\n  },\n  {\n    title: \"Categories\",\n    url: \"/categories\",\n    icon: FolderTree,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\ninterface AppSidebarProps {\n  activeItem?: string;\n}\n\nexport default function AppSidebar({ activeItem = \"Dashboard\" }: AppSidebarProps) {\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 rounded-md bg-gradient-to-br from-chart-1 to-chart-2 flex items-center justify-center\">\n            <Sparkles className=\"w-4 h-4 text-white\" />\n          </div>\n          <span className=\"text-lg font-bold\">InvoiceAI</span>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={item.title === activeItem}\n                    data-testid={`sidebar-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        <div className=\"flex items-center gap-3 p-2 rounded-md hover-elevate\">\n          <Avatar className=\"w-8 h-8\">\n            <AvatarFallback className=\"bg-gradient-to-br from-chart-1 to-chart-2 text-white text-xs\">\n              JD\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\">John Doe</p>\n            <p className=\"text-xs text-muted-foreground truncate\">john@example.com</p>\n          </div>\n          <button \n            className=\"p-1 hover-elevate rounded-sm\"\n            onClick={() => console.log(\"Logout clicked\")}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":3023},"client/src/components/PriceChart.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Area, AreaChart } from \"recharts\";\n\nconst mockData = [\n  { date: \"Jan\", price: 2.2 },\n  { date: \"Feb\", price: 2.5 },\n  { date: \"Mar\", price: 2.8 },\n  { date: \"Apr\", price: 2.4 },\n  { date: \"May\", price: 2.6 },\n  { date: \"Jun\", price: 2.9 },\n  { date: \"Jul\", price: 2.7 },\n  { date: \"Aug\", price: 2.5 },\n  { date: \"Sep\", price: 2.3 },\n  { date: \"Oct\", price: 2.6 },\n  { date: \"Nov\", price: 2.8 },\n  { date: \"Dec\", price: 3.0 },\n];\n\ninterface PriceChartProps {\n  title?: string;\n  data?: typeof mockData;\n}\n\nexport default function PriceChart({ title = \"Price Fluctuation Over Time\", data = mockData }: PriceChartProps) {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-xl font-semibold mb-6\">{title}</h3>\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={data}>\n            <defs>\n              <linearGradient id=\"priceGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"hsl(239, 84%, 67%)\" stopOpacity={0.3}/>\n                <stop offset=\"95%\" stopColor=\"hsl(271, 91%, 65%)\" stopOpacity={0.05}/>\n              </linearGradient>\n            </defs>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n            <XAxis \n              dataKey=\"date\" \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fill: 'hsl(var(--muted-foreground))' }}\n            />\n            <YAxis \n              stroke=\"hsl(var(--muted-foreground))\"\n              tick={{ fill: 'hsl(var(--muted-foreground))' }}\n              tickFormatter={(value) => `$${value}`}\n            />\n            <Tooltip \n              contentStyle={{\n                backgroundColor: 'hsl(var(--card))',\n                border: '1px solid hsl(var(--border))',\n                borderRadius: '6px',\n                color: 'hsl(var(--foreground))'\n              }}\n              formatter={(value: number) => [`$${value.toFixed(2)}`, 'Price']}\n            />\n            <Area\n              type=\"monotone\"\n              dataKey=\"price\"\n              stroke=\"hsl(187, 92%, 69%)\"\n              strokeWidth={2}\n              fill=\"url(#priceGradient)\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2415},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":98},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/SeasonalInsights.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, TrendingUp } from \"lucide-react\";\n\nconst seasonalData = [\n  { month: \"January\", purchases: 2, trend: \"low\" },\n  { month: \"February\", purchases: 3, trend: \"low\" },\n  { month: \"March\", purchases: 4, trend: \"medium\" },\n  { month: \"April\", purchases: 5, trend: \"medium\" },\n  { month: \"May\", purchases: 8, trend: \"high\" },\n  { month: \"June\", purchases: 10, trend: \"peak\" },\n  { month: \"July\", purchases: 9, trend: \"high\" },\n  { month: \"August\", purchases: 7, trend: \"high\" },\n  { month: \"September\", purchases: 5, trend: \"medium\" },\n  { month: \"October\", purchases: 4, trend: \"medium\" },\n  { month: \"November\", purchases: 3, trend: \"low\" },\n  { month: \"December\", purchases: 3, trend: \"low\" },\n];\n\nexport default function SeasonalInsights() {\n  const peakMonths = seasonalData.filter(d => d.trend === \"peak\" || d.trend === \"high\");\n  \n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n        <Calendar className=\"w-5 h-5 text-chart-1\" />\n        Seasonal Purchase Pattern\n      </h3>\n\n      <div className=\"space-y-4\">\n        <div className=\"p-4 rounded-md bg-chart-4/10 border border-chart-4/20\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <TrendingUp className=\"w-4 h-4 text-chart-4\" />\n            <span className=\"font-medium text-sm\">Peak Season Detected</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Historical data shows increased purchases during specific months\n          </p>\n          <div className=\"flex flex-wrap gap-2\">\n            {peakMonths.map((month, index) => (\n              <Badge key={index} className=\"bg-chart-4 text-white\">\n                {month.month}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-3 gap-2\">\n          {seasonalData.map((data, index) => (\n            <div \n              key={index}\n              className=\"p-2 rounded-md text-center text-xs\"\n              style={{\n                backgroundColor: \n                  data.trend === \"peak\" ? \"hsl(142, 71%, 45%, 0.2)\" :\n                  data.trend === \"high\" ? \"hsl(142, 71%, 45%, 0.15)\" :\n                  data.trend === \"medium\" ? \"hsl(var(--muted))\" :\n                  \"hsl(var(--muted), 0.5)\"\n              }}\n              data-testid={`season-${index}`}\n            >\n              <div className=\"font-medium\">{data.month.slice(0, 3)}</div>\n              <div className=\"text-muted-foreground\">{data.purchases}</div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"pt-4 border-t\">\n          <p className=\"text-sm text-muted-foreground\">\n            <span className=\"font-medium text-foreground\">Recommendation:</span> Stock up in May-August when demand is highest\n          </p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2969},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/DataPreviewTable.tsx":{"content":"import { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Edit2, Trash2, RefreshCw, Save, X } from \"lucide-react\";\n\ninterface ExtractedItem {\n  id: string;\n  item: string;\n  quantity: number;\n  unit: string;\n  unitPrice: number;\n  total: number;\n  vendor: string;\n  category: string;\n  confidence: number;\n}\n\nconst mockCategories = [\"Vegetables\", \"Fruits\", \"Dairy\", \"Meat\", \"Grains\", \"Beverages\"];\n\nconst mockData: ExtractedItem[] = [\n  { id: \"1\", item: \"Tomatoes\", quantity: 50, unit: \"kg\", unitPrice: 2.5, total: 125, vendor: \"Fresh Farm Co\", category: \"Vegetables\", confidence: 98 },\n  { id: \"2\", item: \"Onions\", quantity: 30, unit: \"kg\", unitPrice: 1.8, total: 54, vendor: \"Fresh Farm Co\", category: \"Vegetables\", confidence: 95 },\n  { id: \"3\", item: \"Milk\", quantity: 100, unit: \"L\", unitPrice: 1.2, total: 120, vendor: \"Dairy Direct\", category: \"Dairy\", confidence: 99 },\n  { id: \"4\", item: \"Chicken Breast\", quantity: 25, unit: \"kg\", unitPrice: 8.5, total: 212.5, vendor: \"Meat Masters\", category: \"Meat\", confidence: 97 },\n];\n\nexport default function DataPreviewTable() {\n  const [items, setItems] = useState<ExtractedItem[]>(mockData);\n  const [editingId, setEditingId] = useState<string | null>(null);\n\n  const handleEdit = (id: string) => {\n    setEditingId(id);\n    console.log(\"Editing item:\", id);\n  };\n\n  const handleSave = (id: string) => {\n    setEditingId(null);\n    console.log(\"Saved item:\", id);\n  };\n\n  const handleCancel = () => {\n    setEditingId(null);\n  };\n\n  const handleDelete = (id: string) => {\n    setItems(items.filter(item => item.id !== id));\n    console.log(\"Deleted item:\", id);\n  };\n\n  const handleReExtract = (id: string) => {\n    console.log(\"Re-extracting item:\", id);\n  };\n\n  const handleCategoryChange = (id: string, category: string) => {\n    setItems(items.map(item => \n      item.id === id ? { ...item, category } : item\n    ));\n    console.log(\"Category changed for item:\", id, \"to:\", category);\n  };\n\n  const handleSaveAll = () => {\n    console.log(\"Saving all items:\", items);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Extracted Invoice Data</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Review and categorize extracted items before saving\n            </p>\n          </div>\n          <Button \n            onClick={handleSaveAll}\n            variant=\"default\"\n            data-testid=\"button-save-all\"\n          >\n            <Save className=\"w-4 h-4 mr-2\" />\n            Save All\n          </Button>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\" data-testid=\"table-preview\">\n            <thead>\n              <tr className=\"border-b\">\n                <th className=\"text-left p-4 font-semibold\">Item</th>\n                <th className=\"text-left p-4 font-semibold\">Quantity</th>\n                <th className=\"text-left p-4 font-semibold\">Unit Price</th>\n                <th className=\"text-left p-4 font-semibold\">Total</th>\n                <th className=\"text-left p-4 font-semibold\">Vendor</th>\n                <th className=\"text-left p-4 font-semibold\">Category</th>\n                <th className=\"text-left p-4 font-semibold\">Confidence</th>\n                <th className=\"text-left p-4 font-semibold\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((item, index) => (\n                <tr \n                  key={item.id} \n                  className=\"border-b hover-elevate\"\n                  data-testid={`row-item-${index}`}\n                >\n                  <td className=\"p-4\">\n                    {editingId === item.id ? (\n                      <Input \n                        defaultValue={item.item} \n                        className=\"h-8\"\n                        data-testid={`input-item-${index}`}\n                      />\n                    ) : (\n                      <span className=\"font-medium\">{item.item}</span>\n                    )}\n                  </td>\n                  <td className=\"p-4\">\n                    {editingId === item.id ? (\n                      <div className=\"flex gap-2\">\n                        <Input \n                          type=\"number\" \n                          defaultValue={item.quantity} \n                          className=\"h-8 w-20\"\n                          data-testid={`input-quantity-${index}`}\n                        />\n                        <span className=\"text-sm text-muted-foreground self-center\">{item.unit}</span>\n                      </div>\n                    ) : (\n                      <span>{item.quantity} {item.unit}</span>\n                    )}\n                  </td>\n                  <td className=\"p-4\">\n                    {editingId === item.id ? (\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\"\n                        defaultValue={item.unitPrice} \n                        className=\"h-8 w-24\"\n                        data-testid={`input-price-${index}`}\n                      />\n                    ) : (\n                      <span>${item.unitPrice.toFixed(2)}</span>\n                    )}\n                  </td>\n                  <td className=\"p-4 font-semibold\">${item.total.toFixed(2)}</td>\n                  <td className=\"p-4 text-sm text-muted-foreground\">{item.vendor}</td>\n                  <td className=\"p-4\">\n                    <Select \n                      value={item.category} \n                      onValueChange={(value) => handleCategoryChange(item.id, value)}\n                    >\n                      <SelectTrigger className=\"h-8 w-32\" data-testid={`select-category-${index}`}>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {mockCategories.map((cat) => (\n                          <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </td>\n                  <td className=\"p-4\">\n                    <Badge \n                      variant={item.confidence >= 95 ? \"default\" : \"secondary\"}\n                      className=\"font-mono text-xs\"\n                    >\n                      {item.confidence}%\n                    </Badge>\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"flex gap-1\">\n                      {editingId === item.id ? (\n                        <>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleSave(item.id)}\n                            data-testid={`button-save-${index}`}\n                          >\n                            <Save className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={handleCancel}\n                            data-testid={`button-cancel-${index}`}\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </>\n                      ) : (\n                        <>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleEdit(item.id)}\n                            data-testid={`button-edit-${index}`}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleReExtract(item.id)}\n                            data-testid={`button-reextract-${index}`}\n                          >\n                            <RefreshCw className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8 text-destructive\"\n                            onClick={() => handleDelete(item.id)}\n                            data-testid={`button-delete-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9370},"client/src/components/DashboardSummary.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown, Package, DollarSign, FileText, Calendar } from \"lucide-react\";\n\nconst summaryStats = [\n  {\n    label: \"Total Categories\",\n    value: \"12\",\n    change: \"+2 this month\",\n    trend: \"up\",\n    icon: Package,\n  },\n  {\n    label: \"Total Invoices\",\n    value: \"48\",\n    change: \"+8 this month\",\n    trend: \"up\",\n    icon: FileText,\n  },\n  {\n    label: \"Total Spent\",\n    value: \"$12,458\",\n    change: \"+12% vs last month\",\n    trend: \"up\",\n    icon: DollarSign,\n  },\n  {\n    label: \"Avg Price Trend\",\n    value: \"+8.5%\",\n    change: \"Past 6 months\",\n    trend: \"up\",\n    icon: TrendingUp,\n  },\n];\n\nexport default function DashboardSummary() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {summaryStats.map((stat, index) => {\n        const Icon = stat.icon;\n        const TrendIcon = stat.trend === \"up\" ? TrendingUp : TrendingDown;\n        return (\n          <Card key={index} className=\"p-6\" data-testid={`summary-card-${index}`}>\n            <div className=\"flex items-center justify-between mb-3\">\n              <span className=\"text-sm text-muted-foreground\">{stat.label}</span>\n              <div className=\"w-10 h-10 rounded-md bg-gradient-to-br from-chart-1/20 to-chart-2/20 flex items-center justify-center\">\n                <Icon className=\"w-5 h-5 text-chart-1\" />\n              </div>\n            </div>\n            <div className=\"text-3xl font-bold mb-1\">{stat.value}</div>\n            <div className=\"flex items-center gap-1 text-xs\">\n              <TrendIcon className={`w-3 h-3 ${stat.trend === \"up\" ? \"text-chart-4\" : \"text-destructive\"}`} />\n              <span className=\"text-muted-foreground\">{stat.change}</span>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1831},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"dark\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"invoice-ai-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1373},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/examples/SeasonalInsights.tsx":{"content":"import SeasonalInsights from '../SeasonalInsights';\n\nexport default function SeasonalInsightsExample() {\n  return (\n    <div className=\"p-8 max-w-2xl\">\n      <SeasonalInsights />\n    </div>\n  );\n}\n","size_bytes":197},"client/src/components/examples/VendorAnalysis.tsx":{"content":"import VendorAnalysis from '../VendorAnalysis';\n\nexport default function VendorAnalysisExample() {\n  return (\n    <div className=\"p-8\">\n      <VendorAnalysis />\n    </div>\n  );\n}\n","size_bytes":179},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/examples/DashboardSummary.tsx":{"content":"import DashboardSummary from '../DashboardSummary';\n\nexport default function DashboardSummaryExample() {\n  return (\n    <div className=\"p-8\">\n      <DashboardSummary />\n    </div>\n  );\n}\n","size_bytes":187},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/CategoryList.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronRight, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Category {\n  id: string;\n  name: string;\n  itemCount: number;\n  totalSpent: number;\n  avgPrice: number;\n  priceChange: number;\n}\n\nconst mockCategories: Category[] = [\n  { id: \"1\", name: \"Tomatoes\", itemCount: 25, totalSpent: 2150, avgPrice: 2.65, priceChange: 8 },\n  { id: \"2\", name: \"Onions\", itemCount: 18, totalSpent: 890, avgPrice: 1.95, priceChange: -3 },\n  { id: \"3\", name: \"Milk\", itemCount: 32, totalSpent: 1280, avgPrice: 1.25, priceChange: 5 },\n  { id: \"4\", name: \"Chicken Breast\", itemCount: 15, totalSpent: 3200, avgPrice: 8.75, priceChange: 12 },\n  { id: \"5\", name: \"Rice\", itemCount: 22, totalSpent: 1540, avgPrice: 3.45, priceChange: -2 },\n  { id: \"6\", name: \"Potatoes\", itemCount: 20, totalSpent: 720, avgPrice: 1.80, priceChange: 4 },\n];\n\ninterface CategoryListProps {\n  selectedId?: string;\n  onSelect?: (id: string) => void;\n}\n\nexport default function CategoryList({ selectedId, onSelect }: CategoryListProps) {\n  return (\n    <Card className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold\">Categories</h3>\n        <Badge variant=\"secondary\">{mockCategories.length} total</Badge>\n      </div>\n\n      <div className=\"space-y-2\">\n        {mockCategories.map((category) => {\n          const isSelected = category.id === selectedId;\n          const TrendIcon = category.priceChange >= 0 ? TrendingUp : TrendingDown;\n          \n          return (\n            <button\n              key={category.id}\n              onClick={() => onSelect?.(category.id)}\n              className={cn(\n                \"w-full text-left p-3 rounded-md transition-all hover-elevate\",\n                isSelected && \"bg-primary/10 border-l-4 border-primary\"\n              )}\n              data-testid={`category-item-${category.id}`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"font-medium truncate\">{category.name}</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {category.itemCount}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                    <span>${category.avgPrice.toFixed(2)}/unit</span>\n                    <span className=\"flex items-center gap-1\">\n                      <TrendIcon className={cn(\n                        \"w-3 h-3\",\n                        category.priceChange >= 0 ? \"text-chart-4\" : \"text-destructive\"\n                      )} />\n                      {Math.abs(category.priceChange)}%\n                    </span>\n                  </div>\n                </div>\n                <ChevronRight className=\"w-4 h-4 text-muted-foreground flex-shrink-0 ml-2\" />\n              </div>\n            </button>\n          );\n        })}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3187},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/TopVendors.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\nconst topVendors = [\n  { name: \"Fresh Farm Co\", purchases: 45, spent: 8250, percentage: 100 },\n  { name: \"Dairy Direct\", purchases: 38, spent: 6890, percentage: 84 },\n  { name: \"Meat Masters\", purchases: 32, spent: 5720, percentage: 69 },\n  { name: \"Green Valley\", purchases: 28, spent: 4560, percentage: 55 },\n  { name: \"Organic Fields\", purchases: 22, spent: 3840, percentage: 47 },\n];\n\nexport default function TopVendors() {\n  return (\n    <Card className=\"p-6\">\n      <h3 className=\"text-lg font-semibold mb-4\">Top Vendors</h3>\n      \n      <div className=\"space-y-4\">\n        {topVendors.map((vendor, index) => (\n          <div key={index} data-testid={`vendor-stat-${index}`}>\n            <div className=\"flex items-center justify-between mb-2\">\n              <div>\n                <div className=\"font-medium\">{vendor.name}</div>\n                <div className=\"text-xs text-muted-foreground\">{vendor.purchases} purchases</div>\n              </div>\n              <div className=\"text-sm font-semibold\">${vendor.spent.toLocaleString()}</div>\n            </div>\n            <Progress value={vendor.percentage} className=\"h-2\" />\n          </div>\n        ))}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1294},"client/src/components/examples/RecentInvoices.tsx":{"content":"import RecentInvoices from '../RecentInvoices';\n\nexport default function RecentInvoicesExample() {\n  return (\n    <div className=\"p-8\">\n      <RecentInvoices />\n    </div>\n  );\n}\n","size_bytes":179}},"version":2}